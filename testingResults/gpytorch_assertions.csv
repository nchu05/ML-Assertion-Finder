filepath,testclass,testname,assertion type,line number,assert string
task2results/gpytorch/test/kernels/test_rq_kernel.py,TestRQKernel,test_ard,assertLess,34,"self.assertLess(torch.norm(res - actual), 1e-05)"
task2results/gpytorch/test/kernels/test_rq_kernel.py,TestRQKernel,test_ard,assertLess,39,"self.assertLess(torch.norm(res - actual), 1e-05)"
task2results/gpytorch/test/kernels/test_rq_kernel.py,TestRQKernel,test_ard,assertLess,45,"self.assertLess(torch.norm(res - actual), 1e-05)"
task2results/gpytorch/test/kernels/test_rq_kernel.py,TestRQKernel,test_ard,assertLess,50,"self.assertLess(torch.norm(res - actual), 1e-05)"
task2results/gpytorch/test/kernels/test_rq_kernel.py,TestRQKernel,test_ard_batch,assertLess,67,"self.assertLess(torch.norm(res - actual), 1e-05)"
task2results/gpytorch/test/kernels/test_rq_kernel.py,TestRQKernel,test_ard_batch,assertLess,72,"self.assertLess(torch.norm(res - actual), 1e-05)"
task2results/gpytorch/test/kernels/test_rq_kernel.py,TestRQKernel,test_ard_batch,assertLess,81,"self.assertLess(torch.norm(res - actual), 1e-05)"
task2results/gpytorch/test/kernels/test_rq_kernel.py,TestRQKernel,test_ard_batch,assertLess,86,"self.assertLess(torch.norm(res - actual), 1e-05)"
task2results/gpytorch/test/kernels/test_rq_kernel.py,TestRQKernel,test_ard_separate_batch,assertLess,103,"self.assertLess(torch.norm(res - actual), 1e-05)"
task2results/gpytorch/test/kernels/test_rq_kernel.py,TestRQKernel,test_ard_separate_batch,assertLess,108,"self.assertLess(torch.norm(res - actual), 1e-05)"
task2results/gpytorch/test/kernels/test_rq_kernel.py,TestRQKernel,test_computes_rational_quadratic,assertLess,121,"self.assertLess(torch.norm(res - actual), 1e-05)"
task2results/gpytorch/test/kernels/test_rq_kernel.py,TestRQKernel,test_computes_rational_quadratic,assertLess,126,"self.assertLess(torch.norm(res - actual), 1e-05)"
task2results/gpytorch/test/kernels/test_rq_kernel.py,TestRQKernel,test_computes_rational_quadratic_gradient,assertLess,151,"self.assertLess(torch.norm(res - raw_lengthscale.grad), 1e-05)"
task2results/gpytorch/test/kernels/test_rq_kernel.py,TestRQKernel,test_computes_rational_quadratic_gradient,assertLess,153,"self.assertLess(torch.norm(res - raw_alpha.grad), 1e-05)"
task2results/gpytorch/test/kernels/test_rq_kernel.py,TestRQKernel,test_subset_active_compute_rational_quadratic,assertLess,170,"self.assertLess(torch.norm(res - actual), 1e-05)"
task2results/gpytorch/test/kernels/test_rq_kernel.py,TestRQKernel,test_subset_active_compute_rational_quadratic,assertLess,175,"self.assertLess(torch.norm(res - actual), 1e-05)"
task2results/gpytorch/test/kernels/test_rq_kernel.py,TestRQKernel,test_subset_active_computes_rational_quadratic_gradient,assertLess,202,"self.assertLess(torch.norm(res - raw_lengthscale.grad), 1e-05)"
task2results/gpytorch/test/kernels/test_rq_kernel.py,TestRQKernel,test_subset_active_computes_rational_quadratic_gradient,assertLess,204,"self.assertLess(torch.norm(res - raw_alpha.grad), 1e-05)"
task2results/gpytorch/test/kernels/test_rq_kernel.py,TestRQKernel,test_initialize_lengthscale,assertLess,210,"self.assertLess(torch.norm(kernel.lengthscale - actual_value), 1e-05)"
task2results/gpytorch/test/kernels/test_rq_kernel.py,TestRQKernel,test_initialize_lengthscale_batch,assertLess,217,"self.assertLess(torch.norm(kernel.lengthscale - actual_value), 1e-05)"
task2results/gpytorch/test/kernels/test_rq_kernel.py,TestRQKernel,test_initialize_alpha,assertLess,223,"self.assertLess(torch.norm(kernel.alpha - actual_value), 1e-05)"
task2results/gpytorch/test/kernels/test_spectral_delta_kernel.py,TestSpectralDeltaKernel,test_active_dims_list,assertLess,36,"self.assertLess(torch.norm(covar_mat - covar_mat_actual) / covar_mat_actual.norm(), 0.0001)"
task2results/gpytorch/test/kernels/test_spectral_delta_kernel.py,TestSpectralDeltaKernel,test_active_dims_range,assertLess,50,"self.assertLess(torch.norm(covar_mat - covar_mat_actual) / covar_mat_actual.norm(), 0.0001)"
task2results/gpytorch/test/kernels/test_grid_interpolation_kernel.py,TestGridInterpolationKernel,test_standard,assertLess,23,"self.assertLess(torch.norm(grid_eval - actual_eval), 2e-05)"
task2results/gpytorch/test/kernels/test_grid_interpolation_kernel.py,TestGridInterpolationKernel,test_standard,assertLess,28,"self.assertLess(torch.norm(grid_eval - actual_eval), 2e-05)"
task2results/gpytorch/test/kernels/test_grid_interpolation_kernel.py,TestGridInterpolationKernel,test_batch_base_kernel,assertLess,37,"self.assertLess(torch.norm(grid_eval - actual_eval), 2e-05)"
task2results/gpytorch/test/kernels/test_grid_interpolation_kernel.py,TestGridInterpolationKernel,test_batch_base_kernel,assertLess,42,"self.assertLess(torch.norm(grid_eval - actual_eval), 2e-05)"
task2results/gpytorch/test/kernels/test_grid_interpolation_kernel.py,TestGridInterpolationKernel,test_batch_base_kernel,assertLess,47,"self.assertLess(torch.norm(grid_eval - actual_eval), 2e-05)"
task2results/gpytorch/test/kernels/test_rbf_kernel_grad.py,TestRBFKernelGrad,test_kernel,assertLess,43,"self.assertLess(torch.norm(res - actual), 1e-05)"
task2results/gpytorch/test/kernels/test_rbf_kernel_grad.py,TestRBFKernelGrad,test_kernel_batch,assertLess,61,"self.assertLess(torch.norm(res - actual), 1e-05)"
task2results/gpytorch/test/kernels/test_rbf_kernel_grad.py,TestRBFKernelGrad,test_initialize_lengthscale,assertLess,67,"self.assertLess(torch.norm(kernel.lengthscale - actual_value), 1e-05)"
task2results/gpytorch/test/kernels/test_rbf_kernel_grad.py,TestRBFKernelGrad,test_initialize_lengthscale_batch,assertLess,74,"self.assertLess(torch.norm(kernel.lengthscale - actual_value), 1e-05)"
task2results/gpytorch/test/kernels/test_rbf_kernel_gradgrad.py,TestRBFKernelGradGrad,test_kernel,assertLess,159,"self.assertLess(torch.norm(res - actual), 1e-05)"
task2results/gpytorch/test/kernels/test_rbf_kernel_gradgrad.py,TestRBFKernelGradGrad,test_kernel_batch,assertLess,177,"self.assertLess(torch.norm(res - actual), 1e-05)"
task2results/gpytorch/test/kernels/test_rbf_kernel_gradgrad.py,TestRBFKernelGradGrad,test_initialize_lengthscale,assertLess,183,"self.assertLess(torch.norm(kernel.lengthscale - actual_value), 1e-05)"
task2results/gpytorch/test/kernels/test_rbf_kernel_gradgrad.py,TestRBFKernelGradGrad,test_initialize_lengthscale_batch,assertLess,190,"self.assertLess(torch.norm(kernel.lengthscale - actual_value), 1e-05)"
task2results/gpytorch/test/kernels/test_scale_kernel.py,TestScaleKernel,test_ard,assertLess,40,"self.assertLess(torch.norm(res - actual), 1e-05)"
task2results/gpytorch/test/kernels/test_scale_kernel.py,TestScaleKernel,test_ard,assertLess,45,"self.assertLess(torch.norm(res - actual), 1e-05)"
task2results/gpytorch/test/kernels/test_scale_kernel.py,TestScaleKernel,test_ard,assertLess,52,"self.assertLess(torch.norm(res - actual), 1e-05)"
task2results/gpytorch/test/kernels/test_scale_kernel.py,TestScaleKernel,test_ard,assertLess,57,"self.assertLess(torch.norm(res - actual), 1e-05)"
task2results/gpytorch/test/kernels/test_scale_kernel.py,TestScaleKernel,test_ard_batch,assertLess,75,"self.assertLess(torch.norm(res - actual), 1e-05)"
task2results/gpytorch/test/kernels/test_scale_kernel.py,TestScaleKernel,test_ard_batch,assertLess,80,"self.assertLess(torch.norm(res - actual), 1e-05)"
task2results/gpytorch/test/kernels/test_scale_kernel.py,TestScaleKernel,test_ard_batch,assertLess,89,"self.assertLess(torch.norm(res - actual), 1e-05)"
task2results/gpytorch/test/kernels/test_scale_kernel.py,TestScaleKernel,test_ard_batch,assertLess,94,"self.assertLess(torch.norm(res - actual), 1e-05)"
task2results/gpytorch/test/kernels/test_scale_kernel.py,TestScaleKernel,test_initialize_outputscale,assertLess,100,"self.assertLess(torch.norm(kernel.outputscale - actual_value), 1e-05)"
task2results/gpytorch/test/kernels/test_scale_kernel.py,TestScaleKernel,test_initialize_outputscale_batch,assertLess,107,"self.assertLess(torch.norm(kernel.outputscale - actual_value), 1e-05)"
task2results/gpytorch/test/kernels/test_linear_kernel.py,TestLinearKernel,test_computes_linear_function_rectangular,assertLess,24,"self.assertLess(torch.norm(res - actual), 0.0001)"
task2results/gpytorch/test/kernels/test_linear_kernel.py,TestLinearKernel,test_computes_linear_function_rectangular,assertLess,29,"self.assertLess(torch.norm(res - actual), 0.0001)"
task2results/gpytorch/test/kernels/test_linear_kernel.py,TestLinearKernel,test_computes_linear_function_square,assertLess,38,"self.assertLess(torch.norm(res - actual), 0.0001)"
task2results/gpytorch/test/kernels/test_linear_kernel.py,TestLinearKernel,test_computes_linear_function_square,assertLess,43,"self.assertLess(torch.norm(res - actual), 0.0001)"
task2results/gpytorch/test/kernels/test_linear_kernel.py,TestLinearKernel,test_computes_linear_function_square,assertLess,50,"self.assertLess(torch.norm(res - actual), 0.0001)"
task2results/gpytorch/test/kernels/test_linear_kernel.py,TestLinearKernel,test_computes_linear_function_square,assertLess,55,"self.assertLess(torch.norm(res - actual), 0.0001)"
task2results/gpytorch/test/kernels/test_linear_kernel.py,TestLinearKernel,test_computes_linear_function_square_batch,assertLess,64,"self.assertLess(torch.norm(res - actual), 0.0001)"
task2results/gpytorch/test/kernels/test_linear_kernel.py,TestLinearKernel,test_computes_linear_function_square_batch,assertLess,69,"self.assertLess(torch.norm(res - actual), 0.0001)"
task2results/gpytorch/test/kernels/test_linear_kernel.py,TestLinearKernel,test_computes_linear_function_square_batch,assertLess,76,"self.assertLess(torch.norm(res - actual), 0.0001)"
task2results/gpytorch/test/kernels/test_linear_kernel.py,TestLinearKernel,test_computes_linear_function_square_batch,assertLess,81,"self.assertLess(torch.norm(res - actual), 0.0001)"
task2results/gpytorch/test/kernels/test_hamming_kernel.py,TestHammingIMQKernel,test_computes_hamming_imq_function,assertLess,66,"self.assertLess(torch.norm(res - actual), 1e-05)"
task2results/gpytorch/test/kernels/test_hamming_kernel.py,TestHammingIMQKernel,test_initialize_alpha,assertLess,76,"self.assertLess(torch.norm(kernel.alpha - actual_value), 1e-05)"
task2results/gpytorch/test/kernels/test_hamming_kernel.py,TestHammingIMQKernel,test_initialize_alpha_batch,assertLess,84,"self.assertLess(torch.norm(kernel.alpha - actual_value), 1e-05)"
task2results/gpytorch/test/kernels/test_hamming_kernel.py,TestHammingIMQKernel,test_initialize_beta,assertLess,94,"self.assertLess(torch.norm(kernel.beta - actual_value), 1e-05)"
task2results/gpytorch/test/kernels/test_hamming_kernel.py,TestHammingIMQKernel,test_initialize_beta_batch,assertLess,102,"self.assertLess(torch.norm(kernel.beta - actual_value), 1e-05)"
task2results/gpytorch/test/kernels/test_spectral_mixture_kernel.py,TestSpectralMixtureKernel,test_active_dims_list,assertLess,37,"self.assertLess(torch.norm(covar_mat - covar_mat_actual) / covar_mat_actual.norm(), 0.0001)"
task2results/gpytorch/test/kernels/test_spectral_mixture_kernel.py,TestSpectralMixtureKernel,test_active_dims_range,assertLess,54,"self.assertLess(torch.norm(covar_mat - covar_mat_actual) / covar_mat_actual.norm(), 0.0001)"
task2results/gpytorch/test/kernels/test_spectral_mixture_kernel.py,TestSpectralMixtureKernel,test_no_batch_kernel_single_batch_x,assertLess,68,"self.assertLess(torch.norm(batch_covar_mat - actual_covar_mat) / actual_covar_mat.norm(), 0.0001)"
task2results/gpytorch/test/kernels/test_spectral_mixture_kernel.py,TestSpectralMixtureKernel,test_no_batch_kernel_single_batch_x,assertLess,73,"self.assertLess(torch.norm(kernel_diag - actual_diag) / actual_diag.norm(), 0.0001)"
task2results/gpytorch/test/kernels/test_spectral_mixture_kernel.py,TestSpectralMixtureKernel,test_single_batch_kernel_single_batch_x,assertLess,87,"self.assertLess(torch.norm(batch_covar_mat - actual_covar_mat) / actual_covar_mat.norm(), 0.0001)"
task2results/gpytorch/test/kernels/test_spectral_mixture_kernel.py,TestSpectralMixtureKernel,test_single_batch_kernel_single_batch_x,assertLess,92,"self.assertLess(torch.norm(kernel_diag - actual_diag) / actual_diag.norm(), 0.0001)"
task2results/gpytorch/test/kernels/test_spectral_mixture_kernel.py,TestSpectralMixtureKernel,test_kernel_getitem_single_batch,assertLess,114,"self.assertLess(torch.norm(res1 - res2) / res1.norm(), 0.0001)"
task2results/gpytorch/test/kernels/test_spectral_mixture_kernel.py,TestSpectralMixtureKernel,test_kernel_getitem_single_batch,assertLess,119,"self.assertLess(torch.norm(kernel_diag - actual_diag) / actual_diag.norm(), 0.0001)"
task2results/gpytorch/test/kernels/test_spectral_mixture_kernel.py,TestSpectralMixtureKernel,test_kernel_getitem_double_batch,assertLess,130,"self.assertLess(torch.norm(res1 - res2) / res1.norm(), 0.0001)"
task2results/gpytorch/test/kernels/test_spectral_mixture_kernel.py,TestSpectralMixtureKernel,test_kernel_getitem_double_batch,assertLess,135,"self.assertLess(torch.norm(kernel_diag - actual_diag) / actual_diag.norm(), 0.0001)"
task2results/gpytorch/test/kernels/test_gaussian_symmetrized_kl_kernel.py,TestGaussianSymmetrizedKLKernel,test_kernel_symkl,assertLessEqual,29,"self.assertLessEqual((kernel_output.to_dense() - result.exp().transpose(-2, -1)).norm(), 1e-05)"
task2results/gpytorch/test/kernels/test_polynomial_kernel.py,TestPolynomialKernel,test_computes_quadratic_kernel,assertLess,28,"self.assertLess(torch.norm(res - actual), 1e-05)"
task2results/gpytorch/test/kernels/test_polynomial_kernel.py,TestPolynomialKernel,test_computes_quadratic_kernel,assertLess,32,"self.assertLess(torch.norm(res - actual), 1e-05)"
task2results/gpytorch/test/kernels/test_polynomial_kernel.py,TestPolynomialKernel,test_computes_quadratic_kernel,assertLess,40,"self.assertLess(torch.norm(res - actual), 1e-05)"
task2results/gpytorch/test/kernels/test_polynomial_kernel.py,TestPolynomialKernel,test_computes_quadratic_kernel,assertLess,45,"self.assertLess(torch.norm(res - actual), 1e-05)"
task2results/gpytorch/test/kernels/test_polynomial_kernel.py,TestPolynomialKernel,test_computes_cubic_kernel,assertLess,59,"self.assertLess(torch.norm(res - actual), 1e-05)"
task2results/gpytorch/test/kernels/test_polynomial_kernel.py,TestPolynomialKernel,test_computes_cubic_kernel,assertLess,64,"self.assertLess(torch.norm(res - actual), 1e-05)"
task2results/gpytorch/test/kernels/test_polynomial_kernel.py,TestPolynomialKernel,test_computes_cubic_kernel,assertLess,72,"self.assertLess(torch.norm(res - actual), 1e-05)"
task2results/gpytorch/test/kernels/test_polynomial_kernel.py,TestPolynomialKernel,test_computes_cubic_kernel,assertLess,77,"self.assertLess(torch.norm(res - actual), 1e-05)"
task2results/gpytorch/test/kernels/test_polynomial_kernel.py,TestPolynomialKernel,test_quadratic_kernel_batch,assertLess,92,"self.assertLess(torch.norm(res - actual), 1e-05)"
task2results/gpytorch/test/kernels/test_polynomial_kernel.py,TestPolynomialKernel,test_cubic_kernel_batch,assertLess,107,"self.assertLess(torch.norm(res - actual), 1e-05)"
task2results/gpytorch/test/kernels/test_periodic_kernel.py,TestPeriodicKernel,test_computes_periodic_function,assertLess,35,"self.assertLess(torch.norm(res - actual), 1e-05)"
task2results/gpytorch/test/kernels/test_periodic_kernel.py,TestPeriodicKernel,test_batch,assertLess,69,"self.assertLess(torch.norm(res - actual), 1e-05)"
task2results/gpytorch/test/kernels/test_periodic_kernel.py,TestPeriodicKernel,test_batch_separate,assertLess,86,"self.assertLess(torch.norm(res - actual), 1e-05)"
task2results/gpytorch/test/kernels/test_rbf_kernel.py,TestRBFKernel,test_ard,assertLess,34,"self.assertLess(torch.norm(res - actual), 1e-05)"
task2results/gpytorch/test/kernels/test_rbf_kernel.py,TestRBFKernel,test_ard,assertLess,39,"self.assertLess(torch.norm(res - actual), 1e-05)"
task2results/gpytorch/test/kernels/test_rbf_kernel.py,TestRBFKernel,test_ard,assertLess,45,"self.assertLess(torch.norm(res - actual), 1e-05)"
task2results/gpytorch/test/kernels/test_rbf_kernel.py,TestRBFKernel,test_ard,assertLess,50,"self.assertLess(torch.norm(res - actual), 1e-05)"
task2results/gpytorch/test/kernels/test_rbf_kernel.py,TestRBFKernel,test_ard_batch,assertLess,65,"self.assertLess(torch.norm(res - actual), 1e-05)"
task2results/gpytorch/test/kernels/test_rbf_kernel.py,TestRBFKernel,test_ard_batch,assertLess,70,"self.assertLess(torch.norm(res - actual), 1e-05)"
task2results/gpytorch/test/kernels/test_rbf_kernel.py,TestRBFKernel,test_ard_batch,assertLess,78,"self.assertLess(torch.norm(res - actual), 1e-05)"
task2results/gpytorch/test/kernels/test_rbf_kernel.py,TestRBFKernel,test_ard_batch,assertLess,83,"self.assertLess(torch.norm(res - actual), 1e-05)"
task2results/gpytorch/test/kernels/test_rbf_kernel.py,TestRBFKernel,test_ard_separate_batch,assertLess,98,"self.assertLess(torch.norm(res - actual), 1e-05)"
task2results/gpytorch/test/kernels/test_rbf_kernel.py,TestRBFKernel,test_ard_separate_batch,assertLess,103,"self.assertLess(torch.norm(res - actual), 1e-05)"
task2results/gpytorch/test/kernels/test_rbf_kernel.py,TestRBFKernel,test_subset_active_compute_radial_basis_function,assertLess,119,"self.assertLess(torch.norm(res - actual), 1e-05)"
task2results/gpytorch/test/kernels/test_rbf_kernel.py,TestRBFKernel,test_subset_active_compute_radial_basis_function,assertLess,124,"self.assertLess(torch.norm(res - actual), 1e-05)"
task2results/gpytorch/test/kernels/test_rbf_kernel.py,TestRBFKernel,test_computes_radial_basis_function,assertLess,137,"self.assertLess(torch.norm(res - actual), 1e-05)"
task2results/gpytorch/test/kernels/test_rbf_kernel.py,TestRBFKernel,test_computes_radial_basis_function,assertLess,142,"self.assertLess(torch.norm(res - actual), 1e-05)"
task2results/gpytorch/test/kernels/test_rbf_kernel.py,TestRBFKernel,test_computes_radial_basis_function_gradient,assertLess,164,"self.assertLess(torch.norm(res - actual_param_grad), 1e-05)"
task2results/gpytorch/test/kernels/test_rbf_kernel.py,TestRBFKernel,test_subset_active_computes_radial_basis_function_gradient,assertLess,188,"self.assertLess(torch.norm(res - actual_param_grad), 1e-05)"
task2results/gpytorch/test/kernels/test_rbf_kernel.py,TestRBFKernel,test_initialize_lengthscale,assertLess,194,"self.assertLess(torch.norm(kernel.lengthscale - actual_value), 1e-05)"
task2results/gpytorch/test/kernels/test_rbf_kernel.py,TestRBFKernel,test_initialize_lengthscale_batch,assertLess,201,"self.assertLess(torch.norm(kernel.lengthscale - actual_value), 1e-05)"
task2results/gpytorch/test/kernels/test_grid_kernel.py,TestGridKernel,test_grid_grid,assertLess,26,"self.assertLess(torch.norm(grid_eval - actual_eval), 2e-05)"
task2results/gpytorch/test/kernels/test_grid_kernel.py,TestGridKernel,test_nongrid_grid,assertLess,38,"self.assertLess(torch.norm(grid_eval - actual_eval), 1e-05)"
task2results/gpytorch/test/kernels/test_grid_kernel.py,TestGridKernel,test_nongrid_nongrid,assertLess,50,"self.assertLess(torch.norm(grid_eval - actual_eval), 1e-05)"
task2results/gpytorch/test/kernels/test_additive_and_product_kernels.py,TestAdditiveAndProductKernel,test_computes_product_of_radial_basis_function,assertLess,58,"self.assertLess(torch.norm(res - actual), 2e-05)"
task2results/gpytorch/test/kernels/test_additive_and_product_kernels.py,TestAdditiveAndProductKernel,test_computes_product_of_radial_basis_function_batch,assertLess,75,"self.assertLess(torch.norm(res - actual), 2e-05)"
task2results/gpytorch/test/kernels/test_additive_and_product_kernels.py,TestAdditiveAndProductKernel,test_computes_sum_of_radial_basis_function,assertLess,91,"self.assertLess(torch.norm(res - actual), 2e-05)"
task2results/gpytorch/test/kernels/test_additive_and_product_kernels.py,TestAdditiveAndProductKernel,test_computes_sum_of_radial_basis_function_diag,assertLess,108,"self.assertLess(torch.norm(res - actual), 0.001)"
task2results/gpytorch/test/kernels/test_additive_and_product_kernels.py,TestAdditiveAndProductKernel,test_computes_sum_of_three_radial_basis_function_diag,assertLess,125,"self.assertLess(torch.norm(res - actual), 0.001)"
task2results/gpytorch/test/kernels/test_additive_and_product_kernels.py,TestAdditiveAndProductKernel,test_computes_product_of_radial_basis_function_diag,assertLess,143,"self.assertLess(torch.norm(res - actual), 0.001)"
task2results/gpytorch/test/kernels/test_additive_and_product_kernels.py,TestAdditiveAndProductKernel,test_computes_product_of_three_radial_basis_function_diag,assertLess,160,"self.assertLess(torch.norm(res - actual), 0.001)"
task2results/gpytorch/test/kernels/test_additive_and_product_kernels.py,TestAdditiveAndProductKernel,test_computes_product_of_three_radial_basis_function,assertLess,180,"self.assertLess(torch.norm(res - actual), 2e-05)"
task2results/gpytorch/test/kernels/test_additive_and_product_kernels.py,TestAdditiveAndProductKernel,test_computes_product_of_three_radial_basis_function,assertLess,192,"self.assertLess(torch.norm(res - actual), 2e-05)"
task2results/gpytorch/test/kernels/test_additive_and_product_kernels.py,TestAdditiveAndProductKernel,test_computes_product_of_four_radial_basis_function,assertLess,213,"self.assertLess(torch.norm(res - actual), 2e-05)"
task2results/gpytorch/test/kernels/test_additive_and_product_kernels.py,TestAdditiveAndProductKernel,test_computes_sum_of_four_radial_basis_function,assertLess,235,"self.assertLess(torch.norm(res - actual), 2e-05)"
task2results/gpytorch/test/kernels/test_additive_and_product_kernels.py,TestAdditiveAndProductKernel,test_computes_sum_of_three_radial_basis_function,assertLess,256,"self.assertLess(torch.norm(res - actual), 2e-05)"
task2results/gpytorch/test/kernels/test_additive_and_product_kernels.py,TestAdditiveAndProductKernel,test_computes_sum_of_three_radial_basis_function,assertLess,268,"self.assertLess(torch.norm(res - actual), 2e-05)"
task2results/gpytorch/test/kernels/test_additive_and_product_kernels.py,TestAdditiveAndProductKernel,test_computes_sum_radial_basis_function_gradient,assertLess,291,"self.assertLess(torch.norm(res - actual_param_grad), 2e-05)"
task2results/gpytorch/test/kernels/test_additive_and_product_kernels.py,TestAdditiveAndProductKernel,test_computes_sum_three_radial_basis_function_gradient,assertLess,319,"self.assertLess(torch.norm(res - actual_param_grad), 2e-05)"
task2results/gpytorch/test/kernels/test_piecewise_polynomial_kernel.py,TestPiecewisePolynomialKernel,test_fmax,assertLess,47,"self.assertLess(torch.norm(res - actual), 1e-05)"
task2results/gpytorch/test/kernels/test_piecewise_polynomial_kernel.py,TestPiecewisePolynomialKernel,test_fmax,assertLess,52,"self.assertLess(torch.norm(res - actual), 1e-05)"
task2results/gpytorch/test/kernels/test_piecewise_polynomial_kernel.py,TestPiecewisePolynomialKernel,test_fmax,assertLess,60,"self.assertLess(torch.norm(res - actual), 1e-05)"
task2results/gpytorch/test/kernels/test_piecewise_polynomial_kernel.py,TestPiecewisePolynomialKernel,test_fmax,assertLess,65,"self.assertLess(torch.norm(res - actual), 1e-05)"
task2results/gpytorch/test/kernels/test_piecewise_polynomial_kernel.py,TestPiecewisePolynomialKernel,test_fmax,assertLess,99,"self.assertLess(torch.norm(res - actual), 1e-05)"
task2results/gpytorch/test/kernels/test_rff_kernel.py,TestRFFKernel,test_active_dims_list,assertLess,43,"self.assertLess(torch.norm(covar_mat - covar_mat_actual) / covar_mat_actual.norm(), 0.0001)"
task2results/gpytorch/test/kernels/test_rff_kernel.py,TestRFFKernel,test_active_dims_range,assertLess,55,"self.assertLess(torch.norm(covar_mat - covar_mat_actual) / covar_mat_actual.norm(), 0.0001)"
task2results/gpytorch/test/kernels/test_rff_kernel.py,TestRFFKernel,test_kernel_getitem_single_batch,assertLess,68,"self.assertLess(torch.norm(res1 - res2) / res1.norm(), 0.0001)"
task2results/gpytorch/test/kernels/test_rff_kernel.py,TestRFFKernel,test_kernel_getitem_double_batch,assertLess,82,"self.assertLess(torch.norm(res1 - res2) / res1.norm(), 0.0001)"
task2results/gpytorch/test/kernels/test_cosine_kernel.py,TestCosineKernel,test_computes_periodic_function,assertLess,26,"self.assertLess(torch.norm(res - actual), 1e-05)"
task2results/gpytorch/test/kernels/test_cosine_kernel.py,TestCosineKernel,test_computes_periodic_function,assertLess,31,"self.assertLess(torch.norm(res - actual), 1e-05)"
task2results/gpytorch/test/kernels/test_cosine_kernel.py,TestCosineKernel,test_computes_periodic_function,assertLess,40,"self.assertLess(torch.norm(res - actual), 1e-05)"
task2results/gpytorch/test/kernels/test_cosine_kernel.py,TestCosineKernel,test_computes_periodic_function,assertLess,45,"self.assertLess(torch.norm(res - actual), 1e-05)"
task2results/gpytorch/test/kernels/test_cosine_kernel.py,TestCosineKernel,test_batch,assertLess,61,"self.assertLess(torch.norm(res - actual), 1e-05)"
task2results/gpytorch/test/kernels/test_cosine_kernel.py,TestCosineKernel,test_batch_separate,assertLess,77,"self.assertLess(torch.norm(res - actual), 1e-05)"
task2results/gpytorch/test/kernels/test_cosine_kernel.py,TestCosineKernel,test_batch_separate,assertLess,82,"self.assertLess(torch.norm(res - actual), 1e-05)"
task2results/gpytorch/test/kernels/test_cosine_kernel.py,TestCosineKernel,test_batch_separate,assertLess,92,"self.assertLess(torch.norm(res - actual), 1e-05)"
task2results/gpytorch/test/kernels/test_cosine_kernel.py,TestCosineKernel,test_batch_separate,assertLess,97,"self.assertLess(torch.norm(res - actual), 1e-05)"
task2results/gpytorch/test/kernels/test_matern_kernel.py,TestMaternKernel,test_forward_nu_1_over_2,assertLess,51,"self.assertLess(torch.norm(res - actual), 0.001)"
task2results/gpytorch/test/kernels/test_matern_kernel.py,TestMaternKernel,test_forward_nu_3_over_2,assertLess,64,"self.assertLess(torch.norm(res - actual), 0.001)"
task2results/gpytorch/test/kernels/test_matern_kernel.py,TestMaternKernel,test_forward_nu_5_over_2,assertLess,77,"self.assertLess(torch.norm(res - actual), 0.001)"
task2results/gpytorch/test/kernels/test_matern_kernel.py,TestMaternKernel,test_ard,assertLess,92,"self.assertLess(torch.norm(res - actual), 0.001)"
task2results/gpytorch/test/kernels/test_matern_kernel.py,TestMaternKernel,test_ard,assertLess,97,"self.assertLess(torch.norm(res - actual), 1e-05)"
task2results/gpytorch/test/kernels/test_matern_kernel.py,TestMaternKernel,test_ard,assertLess,104,"self.assertLess(torch.norm(res - actual), 1e-05)"
task2results/gpytorch/test/kernels/test_matern_kernel.py,TestMaternKernel,test_ard,assertLess,109,"self.assertLess(torch.norm(res - actual), 1e-05)"
task2results/gpytorch/test/kernels/test_matern_kernel.py,TestMaternKernel,test_ard_batch,assertLess,123,"self.assertLess(torch.norm(res - actual), 0.001)"
task2results/gpytorch/test/kernels/test_matern_kernel.py,TestMaternKernel,test_ard_separate_batch,assertLess,137,"self.assertLess(torch.norm(res - actual), 0.001)"
task2results/gpytorch/test/kernels/test_matern_kernel.py,TestMaternKernel,test_ard_separate_batch,assertLess,142,"self.assertLess(torch.norm(res - actual), 1e-05)"
task2results/gpytorch/test/kernels/test_matern_kernel.py,TestMaternKernel,test_ard_separate_batch,assertLess,157,"self.assertLess(torch.norm(res - actual), 1e-05)"
task2results/gpytorch/test/kernels/test_matern_kernel.py,TestMaternKernel,test_ard_separate_batch,assertLess,162,"self.assertLess(torch.norm(res - actual), 1e-05)"
task2results/gpytorch/test/mlls/test_inducing_point_kernel_added_loss_term.py,TestInducingPointKernelAddedLossTerm,test_added_loss_term,assertAllClose,27,"self.assertAllClose(added_loss_term.loss(), torch.tensor(-50.0))"
task2results/gpytorch/test/mlls/test_inducing_point_kernel_added_loss_term.py,TestInducingPointKernelAddedLossTerm,test_added_loss_term_batch,assertAllClose,41,"self.assertAllClose(added_loss_term.loss(), torch.tensor([[-50.0, -25.0], [-5.0, -2.5], [-0.5, -0.25]]))"
task2results/gpytorch/test/mlls/test_leave_one_out_pseudo_likelihood.py,TestLeaveOneOutPseudoLikelihood,test_check_bordered_system,assertAlmostEqual,70,"self.assertAlmostEqual(loocv_1.item(), loocv_2.item())"
task2results/gpytorch/test/priors/test_smoothed_box_prior.py,TestSmoothedBoxPrior,test_smoothed_box_prior_log_prob,assertAlmostEqual,41,"self.assertAlmostEqual(prior.log_prob(t).item(), -0.9473, places=4)"
task2results/gpytorch/test/priors/test_smoothed_box_prior.py,TestSmoothedBoxPrior,test_smoothed_box_prior_log_prob_log_transform,assertAlmostEqual,60,"self.assertAlmostEqual(prior.log_prob(t).item(), -0.9473, places=4)"
task2results/gpytorch/test/priors/test_lkj_prior.py,TestLKJPrior,test_lkj_prior_log_prob,assertAlmostEqual,34,"self.assertAlmostEqual(prior.log_prob(S), dist.log_prob(S_chol), places=4)"
task2results/gpytorch/test/priors/test_lkj_prior.py,TestLKJPrior,test_lkj_prior_sample,assertLess,73,"self.assertLess(max_non_symm, 0.0001)"
task2results/gpytorch/test/priors/test_lkj_prior.py,TestLKJCholeskyFactorPrior,test_lkj_cholesky_factor_prior_log_prob,assertAlmostEqual,98,"self.assertAlmostEqual(prior.log_prob(S_chol), dist.log_prob(S_chol), places=4)"
task2results/gpytorch/test/priors/test_lkj_prior.py,TestLKJCovariancePrior,test_lkj_covariance_prior_log_prob,assertAlmostEqual,159,"self.assertAlmostEqual(prior.log_prob(S), dist_log_prob, places=4)"
task2results/gpytorch/test/priors/test_lkj_prior.py,TestLKJCovariancePrior,test_lkj_covariance_prior_log_prob_hetsd,assertAlmostEqual,181,"self.assertAlmostEqual(prior.log_prob(S), dist_log_prob, places=4)"
task2results/gpytorch/test/priors/test_lkj_prior.py,TestLKJCovariancePrior,test_lkj_covariance_prior_batch_log_prob,assertLessEqual,202,"self.assertLessEqual((prior.log_prob(S) - dist_log_prob).abs().sum(), 0.0001)"
task2results/gpytorch/test/priors/test_lkj_prior.py,TestLKJCovariancePrior,test_lkj_covariance_prior_batch_log_prob,assertLessEqual,207,"self.assertLessEqual((prior.log_prob(S) - dist_log_prob).abs().sum(), 0.0001)"
task2results/gpytorch/test/priors/test_lkj_prior.py,TestLKJCovariancePrior,test_lkj_prior_sample,assertLess,222,"self.assertLess(max_non_symm, 0.0001)"
task2results/gpytorch/test/constraints/test_constraints.py,TestInterval,test_transform_float_bounds,assertAllClose,36,"self.assertAllClose(value, actual_value)"
task2results/gpytorch/test/constraints/test_constraints.py,TestInterval,test_inverse_transform_float_bounds,assertAllClose,45,"self.assertAllClose(v, value)"
task2results/gpytorch/test/constraints/test_constraints.py,TestInterval,test_transform_tensor_bounds,assertAllClose,57,"self.assertAllClose(value, actual_value)"
task2results/gpytorch/test/constraints/test_constraints.py,TestInterval,test_inverse_transform_tensor_bounds,assertAllClose,66,"self.assertAllClose(v, value)"
task2results/gpytorch/test/constraints/test_constraints.py,TestGreaterThan,test_transform_float_greater_than,assertAllClose,90,"self.assertAllClose(value, actual_value)"
task2results/gpytorch/test/constraints/test_constraints.py,TestGreaterThan,test_transform_tensor_greater_than,assertAllClose,102,"self.assertAllClose(value, actual_value)"
task2results/gpytorch/test/constraints/test_constraints.py,TestGreaterThan,test_inverse_transform_float_greater_than,assertAllClose,111,"self.assertAllClose(value, v)"
task2results/gpytorch/test/constraints/test_constraints.py,TestGreaterThan,test_inverse_transform_tensor_greater_than,assertAllClose,120,"self.assertAllClose(value, v)"
task2results/gpytorch/test/constraints/test_constraints.py,TestLessThan,test_transform_float_less_than,assertAllClose,132,"self.assertAllClose(value, actual_value)"
task2results/gpytorch/test/constraints/test_constraints.py,TestLessThan,test_transform_tensor_less_than,assertAllClose,144,"self.assertAllClose(value, actual_value)"
task2results/gpytorch/test/constraints/test_constraints.py,TestLessThan,test_inverse_transform_float_less_than,assertAllClose,153,"self.assertAllClose(value, v)"
task2results/gpytorch/test/constraints/test_constraints.py,TestLessThan,test_inverse_transform_tensor_less_than,assertAllClose,162,"self.assertAllClose(value, v)"
task2results/gpytorch/test/constraints/test_constraints.py,TestPositive,test_transform_float_positive,assertAllClose,174,"self.assertAllClose(value, actual_value)"
task2results/gpytorch/test/constraints/test_constraints.py,TestPositive,test_transform_tensor_positive,assertAllClose,186,"self.assertAllClose(value, actual_value)"
task2results/gpytorch/test/constraints/test_constraints.py,TestPositive,test_inverse_transform_float_positive,assertAllClose,195,"self.assertAllClose(value, v)"
task2results/gpytorch/test/constraints/test_constraints.py,TestPositive,test_inverse_transform_tensor_positive,assertAllClose,204,"self.assertAllClose(value, v)"
task2results/gpytorch/test/means/test_constant_mean.py,TestConstantMean,test_constraint,assertAllClose,53,"self.assertAllClose(mean.constant, torch.zeros(mean.constant.shape))"
task2results/gpytorch/test/means/test_constant_mean.py,TestConstantMean,test_constraint,assertAllClose,59,"self.assertAllClose(mean.constant, torch.tensor(1.65).expand(mean.constant.shape))"
task2results/gpytorch/test/optim/test_ngd.py,TestNGD,test_ngd_step_no_groups,assertAllClose,26,"self.assertAllClose(parameters[0], torch.tensor(2.0))"
task2results/gpytorch/test/optim/test_ngd.py,TestNGD,test_ngd_step_no_groups,assertAllClose,27,"self.assertAllClose(parameters[1], torch.tensor([0.0, 0.0]))"
task2results/gpytorch/test/optim/test_ngd.py,TestNGD,test_ngd_step_groups,assertAllClose,41,"self.assertAllClose(parameters[0]['params'][0], torch.tensor(1.5))"
task2results/gpytorch/test/optim/test_ngd.py,TestNGD,test_ngd_step_groups,assertAllClose,42,"self.assertAllClose(parameters[1]['params'][0], torch.tensor([0.0, 0.0]))"
task2results/gpytorch/test/utils/test_grid.py,TestGrid,test_scale_to_bounds,assertGreater,16,"self.assertGreater(res.min().item(), -1.0)"
task2results/gpytorch/test/utils/test_grid.py,TestGrid,test_scale_to_bounds,assertLess,17,"self.assertLess(res.max().item(), 1.0)"
task2results/gpytorch/test/utils/test_quadrature.py,TestQuadrature,test_gauss_hermite_quadrature_1D_normal_nonbatch,assertLess,49,"self.assertLess(torch.mean(torch.abs(actual - results)), 0.1)"
task2results/gpytorch/test/utils/test_quadrature.py,TestQuadrature,test_gauss_hermite_quadrature_1D_normal_batch,assertLess,77,"self.assertLess(torch.mean(torch.abs(actual - results)), 0.1)"
task2results/gpytorch/test/utils/test_quadrature.py,TestQuadrature,test_gauss_hermite_quadrature_1D_mvn_nonbatch,assertLess,106,"self.assertLess(torch.mean(torch.abs(actual - results)), 0.1)"
task2results/gpytorch/test/utils/test_quadrature.py,TestQuadrature,test_gauss_hermite_quadrature_1D_mvn_batch,assertLess,134,"self.assertLess(torch.mean(torch.abs(actual - results)), 0.1)"
task2results/gpytorch/test/likelihoods/test_multitask_gaussian_likelihood.py,TestMultitaskGaussianLikelihood,test_marginal_variance,assertAllClose,37,"self.assertAllClose(variance, torch.tensor([1.1, 4.2, 9.3, 16.4]).repeat(5, 1))"
task2results/gpytorch/test/likelihoods/test_multitask_gaussian_likelihood.py,TestMultitaskGaussianLikelihood,test_marginal_variance,assertAllClose,45,"self.assertAllClose(variance, torch.tensor([2.1, 8.1, 18.1, 32.1]).repeat(5, 1))"
task2results/gpytorch/test/likelihoods/test_multitask_gaussian_likelihood.py,TestMultitaskGaussianLikelihood,test_setters,assertAlmostEqual,55,"self.assertAlmostEqual(0.5, likelihood.noise.item())"
task2results/gpytorch/test/likelihoods/test_multitask_gaussian_likelihood.py,TestMultitaskGaussianLikelihood,test_setters,assertAlmostEqual,59,"self.assertAlmostEqual(0.04, likelihood.task_noises[i].item())"
task2results/gpytorch/test/likelihoods/test_multitask_gaussian_likelihood.py,TestMultitaskGaussianLikelihood,test_setters,assertAlmostEqual,68,"self.assertAlmostEqual(0.5, likelihood.noise.item())"
task2results/gpytorch/test/likelihoods/test_multitask_gaussian_likelihood.py,TestMultitaskGaussianLikelihood,test_setters,assertAllClose,71,"self.assertAllClose(mat, likelihood.task_noise_covar)"
task2results/gpytorch/test/likelihoods/test_gaussian_likelihood.py,TestGaussianLikelihoodwithMissingObs,test_missing_value_inference,assertLess,217,assert abs(float(likelihood.noise.sqrt()) - 0.5) < 0.02
task2results/gpytorch/test/likelihoods/test_beta_likelihood.py,TestBetaLikelihood,_test_log_marginal,assertAllClose,30,"self.assertAllClose(output.sum(-1), default_log_prob.sum(-1), rtol=0.25, atol=0.1)"
task2results/gpytorch/test/likelihoods/test_beta_likelihood.py,TestBetaLikelihood,_test_log_prob,assertAllClose,41,"self.assertAllClose(output.sum(-1), default_log_prob.sum(-1), rtol=0.25, atol=0.1)"
task2results/gpytorch/test/likelihoods/test_student_t_likelihood.py,TestStudentTLikelihood,_test_log_marginal,assertAllClose,30,"self.assertAllClose(output.sum(-1), default_log_prob.sum(-1), rtol=0.25, atol=0.1)"
task2results/gpytorch/test/likelihoods/test_student_t_likelihood.py,TestStudentTLikelihood,_test_log_prob,assertAllClose,41,"self.assertAllClose(output.sum(-1), default_log_prob.sum(-1), rtol=0.25, atol=0.1)"
task2results/gpytorch/test/likelihoods/test_laplace_likelihood.py,TestLaplaceLikelihood,_test_log_marginal,assertAllClose,30,"self.assertAllClose(output.sum(-1), default_log_prob.sum(-1), rtol=0.25, atol=0.1)"
task2results/gpytorch/test/likelihoods/test_laplace_likelihood.py,TestLaplaceLikelihood,_test_log_prob,assertAllClose,41,"self.assertAllClose(output.sum(-1), default_log_prob.sum(-1), rtol=0.25, atol=0.1)"
task2results/gpytorch/test/likelihoods/test_bernoulli_likelihood.py,TestBernoulliLikelihood,_test_log_marginal,assertAllClose,30,"self.assertAllClose(output.sum(-1), default_log_prob.sum(-1), rtol=0.25, atol=0.1)"
task2results/gpytorch/test/likelihoods/test_bernoulli_likelihood.py,TestBernoulliLikelihood,_test_log_prob,assertAllClose,44,"self.assertAllClose(output.sum(-1), default_log_prob.sum(-1), rtol=0.25, atol=0.1)"
task2results/gpytorch/test/likelihoods/test_general_multitask_gaussian_likelihood.py,TestMultiTaskGPRegression,test_multitask_low_rank_noise_covar,assertGreater,91,"self.assertGreater(task_noise_covar[0, 1].item(), 0.05)"
task2results/gpytorch/test/examples/test_rff_gp_regression.py,TestRFFRegression,test_rff_mean_abs_error,assertGreater,90,"self.assertGreater(param.grad.norm().item(), 0)"
task2results/gpytorch/test/examples/test_rff_gp_regression.py,TestRFFRegression,test_rff_mean_abs_error,assertLess,99,"self.assertLess(mean_abs_error.squeeze().item(), 0.05)"
task2results/gpytorch/test/examples/test_lcm_kernel_regression.py,TestLCMKernelRegression,test_lcm_icm_equivalence,assertLess,98,"self.assertLess((mean - mean_icm).pow(2).mean(), 0.01)"
task2results/gpytorch/test/examples/test_kissgp_white_noise_regression.py,TestKISSGPWhiteNoiseRegression,test_kissgp_gp_mean_abs_error,assertGreater,90,"self.assertGreater(param.grad.norm().item(), 0)"
task2results/gpytorch/test/examples/test_kissgp_white_noise_regression.py,TestKISSGPWhiteNoiseRegression,test_kissgp_gp_mean_abs_error,assertLess,99,"self.assertLess(mean_abs_error.squeeze().item(), 0.05)"
task2results/gpytorch/test/examples/test_kissgp_white_noise_regression.py,TestKISSGPWhiteNoiseRegression,test_kissgp_gp_fast_pred_var,assertGreater,124,"self.assertGreater(param.grad.norm().item(), 0)"
task2results/gpytorch/test/examples/test_kissgp_white_noise_regression.py,TestKISSGPWhiteNoiseRegression,test_kissgp_gp_fast_pred_var,assertLess,139,"self.assertLess(torch.max(var_diff / noise), 0.05)"
task2results/gpytorch/test/examples/test_kissgp_white_noise_regression.py,TestKISSGPWhiteNoiseRegression,test_kissgp_gp_mean_abs_error_cuda,assertGreater,167,"self.assertGreater(param.grad.norm().item(), 0)"
task2results/gpytorch/test/examples/test_kissgp_white_noise_regression.py,TestKISSGPWhiteNoiseRegression,test_kissgp_gp_mean_abs_error_cuda,assertLess,175,"self.assertLess(mean_abs_error.squeeze().item(), 0.02)"
task2results/gpytorch/test/examples/test_kissgp_multiplicative_regression.py,TestKISSGPMultiplicativeRegression,test_kissgp_gp_mean_abs_error,assertGreater,89,"self.assertGreater(param.grad.norm().item(), 0)"
task2results/gpytorch/test/examples/test_kissgp_multiplicative_regression.py,TestKISSGPMultiplicativeRegression,test_kissgp_gp_mean_abs_error,assertLess,99,"self.assertLess(mean_abs_error.squeeze().item(), 0.04)"
task2results/gpytorch/test/examples/test_kissgp_dkl_regression.py,TestDKLRegression,test_dkl_gp_mean_abs_error,assertGreater,99,"self.assertGreater(param.grad.norm().item(), 0)"
task2results/gpytorch/test/examples/test_kissgp_dkl_regression.py,TestDKLRegression,test_dkl_gp_mean_abs_error,assertLess,108,"self.assertLess(mean_abs_error.squeeze().item(), 0.15)"
task2results/gpytorch/test/examples/test_kissgp_dkl_regression.py,TestDKLRegression,test_dkl_gp_fast_pred_var,assertGreater,133,"self.assertGreater(param.grad.norm().item(), 0)"
task2results/gpytorch/test/examples/test_kissgp_dkl_regression.py,TestDKLRegression,test_dkl_gp_fast_pred_var,assertLess,148,"self.assertLess(torch.max(var_diff / noise), 0.15)"
task2results/gpytorch/test/examples/test_svgp_gp_classification.py,TestSVGPClassification,test_classification_error,assertGreater,76,"self.assertGreater(param.grad.norm().item(), 0)"
task2results/gpytorch/test/examples/test_svgp_gp_classification.py,TestSVGPClassification,test_classification_error,assertGreater,79,"self.assertGreater(param.grad.norm().item(), 0)"
task2results/gpytorch/test/examples/test_svgp_gp_classification.py,TestSVGPClassification,test_classification_error,assertLess,86,"self.assertLess(mean_abs_error.item(), 0.2)"
task2results/gpytorch/test/examples/test_keops_gp_regression.py,TestKeOpsGPRegression,test_keops_gp_mean_abs_error,assertLess,77,"self.assertLess(mean_abs_error.squeeze().item(), 0.1)"
task2results/gpytorch/test/examples/test_kissgp_variational_regression.py,TestKISSGPVariationalRegression,train,assertGreater,99,"self.assertGreater(param.grad.norm().item(), 0)"
task2results/gpytorch/test/examples/test_kissgp_variational_regression.py,TestKISSGPVariationalRegression,train,assertGreater,102,"self.assertGreater(param.grad.norm().item(), 0)"
task2results/gpytorch/test/examples/test_kissgp_variational_regression.py,TestKISSGPVariationalRegression,train,assertLess,111,"self.assertLess(mean_abs_error.squeeze().item(), 0.1)"
task2results/gpytorch/test/examples/test_independent_multitask_gp_regression.py,TestIndependentMultitaskGPRegression,test_train_and_eval,assertGreater,79,"self.assertGreater(param.grad.norm().item(), 0)"
task2results/gpytorch/test/examples/test_independent_multitask_gp_regression.py,TestIndependentMultitaskGPRegression,test_train_and_eval,assertLess,92,"self.assertLess(mean_abs_error1.squeeze().item(), 0.01)"
task2results/gpytorch/test/examples/test_independent_multitask_gp_regression.py,TestIndependentMultitaskGPRegression,test_train_and_eval,assertLess,93,"self.assertLess(mean_abs_error2.squeeze().item(), 0.01)"
task2results/gpytorch/test/examples/test_kronecker_multitask_sgpr_regression.py,TestSimpleGPRegression,test_multitask_gp_mean_abs_error,assertLess,83,"self.assertLess(mean_abs_error_task_1.squeeze().item(), 0.05)"
task2results/gpytorch/test/examples/test_kronecker_multitask_sgpr_regression.py,TestSimpleGPRegression,test_multitask_gp_mean_abs_error,assertLess,84,"self.assertLess(mean_abs_error_task_2.squeeze().item(), 0.05)"
task2results/gpytorch/test/examples/test_lmc_svgp_regression.py,TestIndependentMultitaskGPRegression,test_train_and_eval,assertGreater,112,"self.assertGreater(param.grad.norm().item(), 0)"
task2results/gpytorch/test/examples/test_lmc_svgp_regression.py,TestIndependentMultitaskGPRegression,test_train_and_eval,assertGreater,115,"self.assertGreater(param.grad.norm().item(), 0)"
task2results/gpytorch/test/examples/test_lmc_svgp_regression.py,TestIndependentMultitaskGPRegression,test_train_and_eval,assertLess,132,"self.assertLess(mean_abs_error1.squeeze().item(), 0.15)"
task2results/gpytorch/test/examples/test_lmc_svgp_regression.py,TestIndependentMultitaskGPRegression,test_train_and_eval,assertLess,133,"self.assertLess(mean_abs_error2.squeeze().item(), 0.15)"
task2results/gpytorch/test/examples/test_lmc_svgp_regression.py,TestIndependentMultitaskGPRegression,test_train_and_eval,assertLess,134,"self.assertLess(mean_abs_error3.squeeze().item(), 0.15)"
task2results/gpytorch/test/examples/test_lmc_svgp_regression.py,TestIndependentMultitaskGPRegression,test_train_and_eval,assertLess,135,"self.assertLess(mean_abs_error4.squeeze().item(), 0.15)"
task2results/gpytorch/test/examples/test_lmc_svgp_regression.py,TestIndependentMultitaskGPRegression,test_indexed_train_and_eval,assertGreater,176,"self.assertGreater(param.grad.norm().item(), 0)"
task2results/gpytorch/test/examples/test_lmc_svgp_regression.py,TestIndependentMultitaskGPRegression,test_indexed_train_and_eval,assertGreater,179,"self.assertGreater(param.grad.norm().item(), 0)"
task2results/gpytorch/test/examples/test_lmc_svgp_regression.py,TestIndependentMultitaskGPRegression,test_indexed_train_and_eval,assertLess,189,"self.assertLess(mean_abs_error.squeeze().item(), 0.15)"
task2results/gpytorch/test/examples/test_kronecker_multitask_gp_regression.py,TestKroneckerMultiTaskGPRegression,test_multitask_gp_mean_abs_error,assertLess,90,"self.assertLess(mean_abs_error_task_1.squeeze().item(), 0.05)"
task2results/gpytorch/test/examples/test_kronecker_multitask_gp_regression.py,TestKroneckerMultiTaskGPRegression,test_multitask_gp_mean_abs_error,assertLess,91,"self.assertLess(mean_abs_error_task_2.squeeze().item(), 0.05)"
task2results/gpytorch/test/examples/test_kissgp_kronecker_product_regression.py,TestKISSGPKroneckerProductRegression,test_kissgp_gp_mean_abs_error,assertGreater,90,"self.assertGreater(param.grad.norm().item(), 0)"
task2results/gpytorch/test/examples/test_kissgp_kronecker_product_regression.py,TestKISSGPKroneckerProductRegression,test_kissgp_gp_mean_abs_error,assertLess,100,"self.assertLess(mean_abs_error.squeeze().item(), 0.2)"
task2results/gpytorch/test/examples/test_white_noise_regression.py,TestWhiteNoiseGPRegression,test_posterior_latent_gp_and_likelihood_with_optimization,assertGreater,90,"self.assertGreater(param.grad.norm().item(), 0)"
task2results/gpytorch/test/examples/test_white_noise_regression.py,TestWhiteNoiseGPRegression,test_posterior_latent_gp_and_likelihood_with_optimization,assertLess,99,"self.assertLess(mean_abs_error.squeeze().item(), 0.05)"
task2results/gpytorch/test/examples/test_white_noise_regression.py,TestWhiteNoiseGPRegression,test_posterior_latent_gp_and_likelihood_fast_pred_var,assertGreater,139,"self.assertGreater(param.grad.norm().item(), 0)"
task2results/gpytorch/test/examples/test_white_noise_regression.py,TestWhiteNoiseGPRegression,test_posterior_latent_gp_and_likelihood_fast_pred_var,assertLess,156,"self.assertLess(torch.max(var_diff / noise), 0.05)"
task2results/gpytorch/test/examples/test_hadamard_multitask_gp_regression.py,TestHadamardMultitaskGPRegression,test_multitask_gp_mean_abs_error,assertGreater,89,"self.assertGreater(param.grad.norm().item(), 0)"
task2results/gpytorch/test/examples/test_hadamard_multitask_gp_regression.py,TestHadamardMultitaskGPRegression,test_multitask_gp_mean_abs_error,assertLess,97,"self.assertLess(mean_abs_error_task_1.item(), 0.1)"
task2results/gpytorch/test/examples/test_hadamard_multitask_gp_regression.py,TestHadamardMultitaskGPRegression,test_multitask_gp_mean_abs_error,assertLess,102,"self.assertLess(mean_abs_error_task_2.item(), 0.1)"
task2results/gpytorch/test/examples/test_pyro_integration.py,TestPyroIntegration,test_simple_high_level_interface,assertLess,230,"self.assertLess(mean_abs_error.squeeze().item(), 0.15)"
task2results/gpytorch/test/examples/test_pyro_integration.py,TestPyroIntegration,test_high_level_interface,assertLess,275,"self.assertLess(mean_abs_error_task_1.squeeze().item(), 0.15)"
task2results/gpytorch/test/examples/test_pyro_integration.py,TestPyroIntegration,test_high_level_interface,assertLess,276,"self.assertLess(mean_abs_error_task_2.squeeze().item(), 0.15)"
task2results/gpytorch/test/examples/test_pyro_integration.py,TestPyroIntegration,test_high_level_interface,assertLess,277,"self.assertLess(mean_abs_error_task_3.squeeze().item(), 0.15)"
task2results/gpytorch/test/examples/test_pyro_integration.py,TestPyroIntegration,test_high_level_interface,assertLess,278,"self.assertLess(mean_abs_error_task_4.squeeze().item(), 0.15)"
task2results/gpytorch/test/examples/test_pyro_integration.py,TestPyroIntegration,test_low_level_interface,assertGreater,312,"self.assertGreater(cluster_probs[0, cluster_1_idx].squeeze().item(), 0.9)"
task2results/gpytorch/test/examples/test_pyro_integration.py,TestPyroIntegration,test_low_level_interface,assertGreater,313,"self.assertGreater(cluster_probs[1, cluster_2_idx].squeeze().item(), 0.9)"
task2results/gpytorch/test/examples/test_pyro_integration.py,TestPyroIntegration,test_low_level_interface,assertGreater,314,"self.assertGreater(cluster_probs[2, cluster_2_idx].squeeze().item(), 0.9)"
task2results/gpytorch/test/examples/test_pyro_integration.py,TestPyroIntegration,test_low_level_interface,assertGreater,315,"self.assertGreater(cluster_probs[3, cluster_1_idx].squeeze().item(), 0.9)"
task2results/gpytorch/test/examples/test_pyro_integration.py,TestPyroIntegration,pyro_model,assertLess,365,"self.assertLess(abs_delta, 0.05)"
task2results/gpytorch/test/examples/test_unwhitened_svgp_regression.py,TestSVGPRegression,test_regression_error,assertGreater,73,"self.assertGreater(param.grad.norm().item(), 0)"
task2results/gpytorch/test/examples/test_unwhitened_svgp_regression.py,TestSVGPRegression,test_regression_error,assertGreater,76,"self.assertGreater(param.grad.norm().item(), 0)"
task2results/gpytorch/test/examples/test_unwhitened_svgp_regression.py,TestSVGPRegression,test_regression_error,assertLess,83,"self.assertLess(mean_abs_error.item(), 0.014)"
task2results/gpytorch/test/examples/test_unwhitened_svgp_regression.py,TestSVGPRegression,test_regression_error,assertLess,93,"self.assertLess(updated_abs_error.item(), 0.15)"
task2results/gpytorch/test/examples/test_dspp_regression.py,TestSGPRRegression,test_dspp,assertLess,131,"self.assertLess((preds.mean - test_y).abs().mean().item(), 0.5)"
task2results/gpytorch/test/examples/test_dspp_regression.py,TestSGPRRegression,test_dspp,assertLess,132,"self.assertLess(preds.variance.mean().item(), 0.5)"
task2results/gpytorch/test/examples/test_grid_gp_regression.py,TestGridGPRegression,test_grid_gp_mean_abs_error,assertGreater,97,"self.assertGreater(param.grad.norm().item(), 0)"
task2results/gpytorch/test/examples/test_grid_gp_regression.py,TestGridGPRegression,test_grid_gp_mean_abs_error,assertLess,108,"self.assertLess(mean_abs_error.squeeze().item(), 0.3)"
task2results/gpytorch/test/examples/test_fixed_noise_fanatasy_updates.py,TestFixedNoiseFantasies,test_fixed_noise_fantasy_updates,assertGreater,80,"self.assertGreater(param.grad.norm().item(), 0)"
task2results/gpytorch/test/examples/test_fixed_noise_fanatasy_updates.py,TestFixedNoiseFantasies,test_fixed_noise_fantasy_updates,assertAllClose,107,"self.assertAllClose(test_function_predictions.mean, fant_function_predictions.mean, atol=0.0001)"
task2results/gpytorch/test/examples/test_fixed_noise_fanatasy_updates.py,TestFixedNoiseFantasies,test_fixed_noise_fantasy_updates,assertLess,113,"self.assertLess(relative_error, 1.5)"
task2results/gpytorch/test/examples/test_fixed_noise_fanatasy_updates.py,TestFixedNoiseFantasies,test_fixed_noise_fantasy_updates_batch,assertGreater,149,"self.assertGreater(param.grad.norm().item(), 0)"
task2results/gpytorch/test/examples/test_fixed_noise_fanatasy_updates.py,TestFixedNoiseFantasies,test_fixed_noise_fantasy_updates_batch,assertAllClose,168,"self.assertAllClose(test_function_predictions.mean, fant_function_predictions.mean[0], atol=0.0001)"
task2results/gpytorch/test/examples/test_simple_gp_classification.py,TestSimpleGPClassification,test_classification_error,assertGreater,72,"self.assertGreater(param.grad.norm().item(), 0)"
task2results/gpytorch/test/examples/test_simple_gp_classification.py,TestSimpleGPClassification,test_classification_error,assertLess,79,"self.assertLess(mean_abs_error.item(), 1e-05)"
task2results/gpytorch/test/examples/test_svgp_gp_regression.py,TestSVGPRegression,test_loading_old_model,assertLess,70,"self.assertLess(mean_abs_error.item(), 0.1)"
task2results/gpytorch/test/examples/test_svgp_gp_regression.py,TestSVGPRegression,test_regression_error,assertGreater,104,"self.assertGreater(param.grad.norm().item(), 0)"
task2results/gpytorch/test/examples/test_svgp_gp_regression.py,TestSVGPRegression,test_regression_error,assertGreater,107,"self.assertGreater(param.grad.norm().item(), 0)"
task2results/gpytorch/test/examples/test_svgp_gp_regression.py,TestSVGPRegression,test_regression_error,assertLess,114,"self.assertLess(mean_abs_error.item(), 0.1)"
task2results/gpytorch/test/examples/test_svgp_gp_regression.py,TestSVGPRegression,test_regression_error,assertLess,127,"self.assertLess(updated_abs_error.item(), 0.15)"
task2results/gpytorch/test/examples/test_decoupled_svgp_regression.py,TestSVGPRegression,test_regression_error,assertGreater,81,"self.assertGreater(param.grad.norm().item(), 0)"
task2results/gpytorch/test/examples/test_decoupled_svgp_regression.py,TestSVGPRegression,test_regression_error,assertGreater,84,"self.assertGreater(param.grad.norm().item(), 0)"
task2results/gpytorch/test/examples/test_decoupled_svgp_regression.py,TestSVGPRegression,test_regression_error,assertLess,91,"self.assertLess(mean_abs_error.item(), 0.1)"
task2results/gpytorch/test/examples/test_batch_multitask_gp_regression.py,TestBatchMultitaskGPRegression,test_train_on_single_set_test_on_batch,assertGreater,95,"self.assertGreater(param.grad.norm().item(), 0)"
task2results/gpytorch/test/examples/test_batch_multitask_gp_regression.py,TestBatchMultitaskGPRegression,test_train_on_single_set_test_on_batch,assertLess,107,"self.assertLess(mean_abs_error1.squeeze().item(), 0.05)"
task2results/gpytorch/test/examples/test_batch_multitask_gp_regression.py,TestBatchMultitaskGPRegression,test_train_on_single_set_test_on_batch,assertLess,108,"self.assertLess(mean_abs_error2.squeeze().item(), 0.05)"
task2results/gpytorch/test/examples/test_batch_multitask_gp_regression.py,TestBatchMultitaskGPRegression,test_train_on_batch_test_on_batch,assertGreater,133,"self.assertGreater(param.grad.norm().item(), 0)"
task2results/gpytorch/test/examples/test_batch_multitask_gp_regression.py,TestBatchMultitaskGPRegression,test_train_on_batch_test_on_batch,assertLess,145,"self.assertLess(mean_abs_error1.squeeze().item(), 0.05)"
task2results/gpytorch/test/examples/test_batch_multitask_gp_regression.py,TestBatchMultitaskGPRegression,test_train_on_batch_test_on_batch,assertLess,146,"self.assertLess(mean_abs_error2.squeeze().item(), 0.05)"
task2results/gpytorch/test/examples/test_batch_multitask_gp_regression.py,TestBatchMultitaskGPRegression,test_train_on_batch_test_on_batch_shared_hypers_over_batch,assertGreater,171,"self.assertGreater(param.grad.norm().item(), 0)"
task2results/gpytorch/test/examples/test_batch_multitask_gp_regression.py,TestBatchMultitaskGPRegression,test_train_on_batch_test_on_batch_shared_hypers_over_batch,assertLess,183,"self.assertLess(mean_abs_error1.squeeze().item(), 0.05)"
task2results/gpytorch/test/examples/test_batch_multitask_gp_regression.py,TestBatchMultitaskGPRegression,test_train_on_batch_test_on_batch_shared_hypers_over_batch,assertLess,184,"self.assertLess(mean_abs_error2.squeeze().item(), 0.05)"
task2results/gpytorch/test/examples/test_simple_gp_regression.py,TestSimpleGPRegression,test_prior,assertAllClose,75,"self.assertAllClose(function_predictions.mean, torch.full_like(function_predictions.mean, fill_value=1.5))"
task2results/gpytorch/test/examples/test_simple_gp_regression.py,TestSimpleGPRegression,test_prior,assertAllClose,76,"self.assertAllClose(function_predictions.variance, correct_variance.squeeze().expand_as(function_predictions.variance))"
task2results/gpytorch/test/examples/test_simple_gp_regression.py,TestSimpleGPRegression,test_posterior_latent_gp_and_likelihood_without_optimization,assertAllClose,126,"self.assertAllClose(function_predictions.mean, train_y)"
task2results/gpytorch/test/examples/test_simple_gp_regression.py,TestSimpleGPRegression,test_posterior_latent_gp_and_likelihood_without_optimization,assertAllClose,127,"self.assertAllClose(function_predictions.variance, torch.zeros_like(function_predictions.variance))"
task2results/gpytorch/test/examples/test_simple_gp_regression.py,TestSimpleGPRegression,test_posterior_latent_gp_and_likelihood_without_optimization,assertAllClose,132,"self.assertAllClose(test_function_predictions.mean, torch.zeros_like(test_function_predictions.mean))"
task2results/gpytorch/test/examples/test_simple_gp_regression.py,TestSimpleGPRegression,test_posterior_latent_gp_and_likelihood_without_optimization,assertAllClose,133,"self.assertAllClose(test_function_predictions.variance, gp_model.covar_module.outputscale.expand_as(test_function_predictions.variance))"
task2results/gpytorch/test/examples/test_simple_gp_regression.py,TestSimpleGPRegression,test_posterior_latent_gp_and_likelihood_with_optimization,assertGreater,247,"self.assertGreater(param.grad.norm().item(), 0)"
task2results/gpytorch/test/examples/test_simple_gp_regression.py,TestSimpleGPRegression,test_posterior_latent_gp_and_likelihood_with_optimization,assertLess,257,"self.assertLess(mean_abs_error.item(), 0.05)"
task2results/gpytorch/test/examples/test_simple_gp_regression.py,TestSimpleGPRegression,test_fantasy_updates,assertGreater,292,"self.assertGreater(param.grad.norm().item(), 0)"
task2results/gpytorch/test/examples/test_simple_gp_regression.py,TestSimpleGPRegression,test_fantasy_updates,assertAllClose,317,"self.assertAllClose(test_function_predictions.mean, fant_function_predictions.mean, atol=0.0001)"
task2results/gpytorch/test/examples/test_simple_gp_regression.py,TestSimpleGPRegression,test_fantasy_updates,assertLess,323,"self.assertLess(relative_error, 1.5)"
task2results/gpytorch/test/examples/test_simple_gp_regression.py,TestSimpleGPRegression,test_fantasy_updates_batch,assertGreater,358,"self.assertGreater(param.grad.norm().item(), 0)"
task2results/gpytorch/test/examples/test_simple_gp_regression.py,TestSimpleGPRegression,test_fantasy_updates_batch,assertAllClose,376,"self.assertAllClose(test_function_predictions.mean, fant_function_predictions.mean[0], atol=0.0001)"
task2results/gpytorch/test/examples/test_simple_gp_regression.py,TestSimpleGPRegression,test_posterior_latent_gp_and_likelihood_fast_pred_var,assertGreater,425,"self.assertGreater(param.grad.norm().item(), 0)"
task2results/gpytorch/test/examples/test_simple_gp_regression.py,TestSimpleGPRegression,test_posterior_latent_gp_and_likelihood_fast_pred_var,assertLess,442,"self.assertLess(torch.max(var_diff / noise), 0.05)"
task2results/gpytorch/test/examples/test_simple_gp_regression.py,TestSimpleGPRegression,pyro_model,assertLess,480,"self.assertLess(torch.norm(output.mean[0] - test_y) / test_y.norm(), 0.2)"
task2results/gpytorch/test/examples/test_simple_gp_regression.py,TestSimpleGPRegression,pyro_model,assertLess,481,"self.assertLess(torch.norm(output.mean[1] - test_y) / test_y.norm(), 0.2)"
task2results/gpytorch/test/examples/test_simple_gp_regression.py,TestSimpleGPRegression,pyro_model,assertLess,482,"self.assertLess(torch.norm(output.mean[2] - test_y) / test_y.norm(), 0.2)"
task2results/gpytorch/test/examples/test_kissgp_gp_classification.py,TestKISSGPClassification,test_kissgp_classification_error,assertGreater,79,"self.assertGreater(param.grad.norm().item(), 0)"
task2results/gpytorch/test/examples/test_kissgp_gp_classification.py,TestKISSGPClassification,test_kissgp_classification_error,assertLess,86,"self.assertLess(mean_abs_error.squeeze().item(), 1e-05)"
task2results/gpytorch/test/examples/test_batch_decoupled_ppgpr_regression.py,TestPPGPRRegression,test_model,assertGreater,75,"self.assertGreater(param.grad.norm().item(), 0)"
task2results/gpytorch/test/examples/test_batch_decoupled_ppgpr_regression.py,TestPPGPRRegression,test_model,assertGreater,78,"self.assertGreater(param.grad.norm().item(), 0)"
task2results/gpytorch/test/examples/test_batch_decoupled_ppgpr_regression.py,TestPPGPRRegression,test_model,assertLess,85,"self.assertLess(mean_abs_error.item(), 0.1)"
task2results/gpytorch/test/examples/test_batch_svgp_gp_regression.py,TestSVGPRegression,test_regression_error,assertGreater,87,"self.assertGreater(param.grad.norm().item(), 0)"
task2results/gpytorch/test/examples/test_batch_svgp_gp_regression.py,TestSVGPRegression,test_regression_error,assertGreater,90,"self.assertGreater(param.grad.norm().item(), 0)"
task2results/gpytorch/test/examples/test_batch_svgp_gp_regression.py,TestSVGPRegression,test_regression_error,assertLess,98,"self.assertLess(mean_abs_error.item(), 0.012)"
task2results/gpytorch/test/examples/test_batch_svgp_gp_regression.py,TestSVGPRegression,test_regression_error,assertLess,99,"self.assertLess(mean_abs_error2.item(), 0.1)"
task2results/gpytorch/test/examples/test_batch_svgp_gp_regression.py,TestSVGPRegression,test_regression_error_shared_inducing_locations,assertGreater,122,"self.assertGreater(param.grad.norm().item(), 0)"
task2results/gpytorch/test/examples/test_batch_svgp_gp_regression.py,TestSVGPRegression,test_regression_error_shared_inducing_locations,assertGreater,125,"self.assertGreater(param.grad.norm().item(), 0)"
task2results/gpytorch/test/examples/test_batch_svgp_gp_regression.py,TestSVGPRegression,test_regression_error_shared_inducing_locations,assertLess,133,"self.assertLess(mean_abs_error.item(), 0.01)"
task2results/gpytorch/test/examples/test_batch_svgp_gp_regression.py,TestSVGPRegression,test_regression_error_shared_inducing_locations,assertLess,134,"self.assertLess(mean_abs_error2.item(), 0.02)"
task2results/gpytorch/test/examples/test_batch_svgp_gp_regression.py,TestSVGPRegression,test_regression_error_cuda,assertGreater,160,"self.assertGreater(param.grad.norm().item(), 0)"
task2results/gpytorch/test/examples/test_batch_svgp_gp_regression.py,TestSVGPRegression,test_regression_error_cuda,assertGreater,163,"self.assertGreater(param.grad.norm().item(), 0)"
task2results/gpytorch/test/examples/test_batch_svgp_gp_regression.py,TestSVGPRegression,test_regression_error_cuda,assertLess,171,"self.assertLess(mean_abs_error.item(), 0.1)"
task2results/gpytorch/test/examples/test_batch_svgp_gp_regression.py,TestSVGPRegression,test_regression_error_cuda,assertLess,172,"self.assertLess(mean_abs_error2.item(), 0.1)"
task2results/gpytorch/test/examples/test_kissgp_additive_regression.py,TestKISSGPAdditiveRegression,test_kissgp_gp_mean_abs_error,assertGreater,86,"self.assertGreater(param.grad.norm().item(), 0)"
task2results/gpytorch/test/examples/test_kissgp_additive_regression.py,TestKISSGPAdditiveRegression,test_kissgp_gp_mean_abs_error,assertLess,94,"self.assertLess(mean_abs_error.squeeze().item(), 0.2)"
task2results/gpytorch/test/examples/test_kissgp_additive_classification.py,TestKISSGPAdditiveClassification,test_kissgp_classification_error,assertGreater,90,"self.assertGreater(param.grad.norm().item(), 0)"
task2results/gpytorch/test/examples/test_kissgp_additive_classification.py,TestKISSGPAdditiveClassification,test_kissgp_classification_error,assertLess,99,"self.assertLess(mean_abs_error.squeeze().item(), 0.15)"
task2results/gpytorch/test/examples/test_batch_gp_regression.py,TestBatchGPRegression,test_train_on_single_set_test_on_batch,assertGreater,92,"self.assertGreater(param.grad.norm().item(), 0)"
task2results/gpytorch/test/examples/test_batch_gp_regression.py,TestBatchGPRegression,test_train_on_single_set_test_on_batch,assertLess,102,"self.assertLess(mean_abs_error1.squeeze().item(), 0.1)"
task2results/gpytorch/test/examples/test_batch_gp_regression.py,TestBatchGPRegression,test_train_on_single_set_test_on_batch,assertLess,110,"self.assertLess(mean_abs_error1.squeeze().item(), 0.1)"
task2results/gpytorch/test/examples/test_batch_gp_regression.py,TestBatchGPRegression,test_train_on_single_set_test_on_batch,assertLess,111,"self.assertLess(mean_abs_error2.squeeze().item(), 0.1)"
task2results/gpytorch/test/examples/test_batch_gp_regression.py,TestBatchGPRegression,test_train_on_batch_test_on_batch,assertGreater,147,"self.assertGreater(param.grad.norm().item(), 0)"
task2results/gpytorch/test/examples/test_batch_gp_regression.py,TestBatchGPRegression,test_train_on_batch_test_on_batch,assertLess,157,"self.assertLess(mean_abs_error1.squeeze().item(), 0.1)"
task2results/gpytorch/test/examples/test_batch_gp_regression.py,TestBatchGPRegression,test_train_on_batch_test_on_batch,assertLess,165,"self.assertLess(mean_abs_error1.squeeze().item(), 0.1)"
task2results/gpytorch/test/examples/test_batch_gp_regression.py,TestBatchGPRegression,test_train_on_batch_test_on_batch,assertLess,166,"self.assertLess(mean_abs_error2.squeeze().item(), 0.1)"
task2results/gpytorch/test/examples/test_batch_gp_regression.py,TestBatchGPRegression,test_train_on_batch_test_on_batch_shared_hypers_over_batch,assertGreater,201,"self.assertGreater(param.grad.norm().item(), 0)"
task2results/gpytorch/test/examples/test_batch_gp_regression.py,TestBatchGPRegression,test_train_on_batch_test_on_batch_shared_hypers_over_batch,assertLess,211,"self.assertLess(mean_abs_error1.squeeze().item(), 0.1)"
task2results/gpytorch/test/examples/test_batch_gp_regression.py,TestBatchGPRegression,test_train_on_batch_test_on_batch_shared_hypers_over_batch,assertLess,219,"self.assertLess(mean_abs_error1.squeeze().item(), 0.1)"
task2results/gpytorch/test/examples/test_batch_gp_regression.py,TestBatchGPRegression,test_train_on_batch_test_on_batch_shared_hypers_over_batch,assertLess,220,"self.assertLess(mean_abs_error2.squeeze().item(), 0.1)"
task2results/gpytorch/test/examples/test_sgpr_regression.py,TestSGPRRegression,test_sgpr_mean_abs_error,assertGreater,106,"self.assertGreater(param.grad.norm().item(), 0)"
task2results/gpytorch/test/examples/test_sgpr_regression.py,TestSGPRRegression,test_sgpr_mean_abs_error,assertLess,120,"self.assertLess(mean_abs_error.squeeze().item(), 0.1)"
task2results/gpytorch/test/examples/test_sgpr_regression.py,TestSGPRRegression,test_sgpr_mean_abs_error,assertAllClose,124,"self.assertAllClose(test_vars, likelihood(gp_model(test_x)).covariance_matrix.diagonal(dim1=-1, dim2=-2))"
task2results/gpytorch/test/examples/test_sgpr_regression.py,TestSGPRRegression,test_sgpr_mean_abs_error,assertGreater,125,"self.assertGreater(test_vars.min().item() + 0.1, likelihood.noise.item())"
task2results/gpytorch/test/examples/test_sgpr_regression.py,TestSGPRRegression,test_sgpr_mean_abs_error,assertLess,126,"self.assertLess(test_vars.max().item() - 0.05, likelihood.noise.item() + gp_model.covar_module.base_kernel.outputscale.item())"
task2results/gpytorch/test/examples/test_sgpr_regression.py,TestSGPRRegression,test_sgpr_mean_abs_error,assertLess,133,"self.assertLess((test_outputs.mean - train_y).max().item(), 0.1)"
task2results/gpytorch/test/examples/test_sgpr_regression.py,TestSGPRRegression,test_sgpr_mean_abs_error,assertLess,134,"self.assertLess(test_outputs.variance.max().item(), likelihood.noise.item() * 2)"
task2results/gpytorch/test/examples/test_kissgp_kronecker_product_classification.py,TestKISSGPKroneckerProductClassification,test_kissgp_classification_error,assertGreater,86,"self.assertGreater(param.grad.norm().item(), 0)"
task2results/gpytorch/test/examples/test_kissgp_kronecker_product_classification.py,TestKISSGPKroneckerProductClassification,test_kissgp_classification_error,assertLess,94,"self.assertLess(mean_abs_error.squeeze().item(), 1e-05)"
task2results/gpytorch/test/examples/test_kronecker_multitask_ski_gp_regression.py,TestKroneckerMultiTaskKISSGPRegression,test_multitask_gp_mean_abs_error,assertLess,96,"self.assertLess(mean_abs_error_task_1.squeeze().item(), 0.05)"
task2results/gpytorch/test/examples/test_kronecker_multitask_ski_gp_regression.py,TestKroneckerMultiTaskKISSGPRegression,test_multitask_gp_mean_abs_error,assertLess,97,"self.assertLess(mean_abs_error_task_2.squeeze().item(), 0.05)"
task2results/gpytorch/test/examples/test_kissgp_gp_regression.py,TestKISSGPRegression,test_kissgp_gp_mean_abs_error,assertGreater,84,"self.assertGreater(param.grad.norm().item(), 0)"
task2results/gpytorch/test/examples/test_kissgp_gp_regression.py,TestKISSGPRegression,test_kissgp_gp_mean_abs_error,assertLess,93,"self.assertLess(mean_abs_error.squeeze().item(), 0.05)"
task2results/gpytorch/test/examples/test_kissgp_gp_regression.py,TestKISSGPRegression,test_kissgp_gp_fast_pred_var,assertGreater,118,"self.assertGreater(param.grad.norm().item(), 0)"
task2results/gpytorch/test/examples/test_kissgp_gp_regression.py,TestKISSGPRegression,test_kissgp_gp_fast_pred_var,assertLess,133,"self.assertLess(torch.max(var_diff / noise), 0.05)"
task2results/gpytorch/test/examples/test_kissgp_gp_regression.py,TestKISSGPRegression,test_kissgp_gp_mean_abs_error_cuda,assertGreater,161,"self.assertGreater(param.grad.norm().item(), 0)"
task2results/gpytorch/test/examples/test_kissgp_gp_regression.py,TestKISSGPRegression,test_kissgp_gp_mean_abs_error_cuda,assertLess,169,"self.assertLess(mean_abs_error.squeeze().item(), 0.02)"
task2results/gpytorch/test/examples/test_spectral_mixture_gp_regression.py,TestSpectralMixtureGPRegression,test_spectral_mixture_gp_mean_abs_error,assertLess,104,"self.assertLess(mean_abs_error.squeeze().item(), 0.02)"
task2results/gpytorch/test/lazy/test_lazy_evaluated_kernel_tensor.py,TestLazyEvaluatedKernelTensorBatch,_test_matmul,assertAllClose,37,"self.assertAllClose(res_evaluated, actual)"
task2results/gpytorch/test/lazy/test_lazy_evaluated_kernel_tensor.py,TestLazyEvaluatedKernelTensorBatch,_test_matmul,assertAllClose,43,"self.assertAllClose(param.grad, param_copy.grad, rtol=0.001)"
task2results/gpytorch/test/lazy/test_lazy_evaluated_kernel_tensor.py,TestLazyEvaluatedKernelTensorBatch,_test_matmul,assertAllClose,44,"self.assertAllClose(lazy_tensor.x1.grad + lazy_tensor.x2.grad, lazy_tensor_copy.x1.grad + lazy_tensor_copy.x2.grad, rtol=0.001)"
task2results/gpytorch/test/lazy/test_lazy_evaluated_kernel_tensor.py,TestLazyEvaluatedKernelTensorBatch,_test_rmatmul,assertAllClose,55,"self.assertAllClose(res, actual)"
task2results/gpytorch/test/lazy/test_lazy_evaluated_kernel_tensor.py,TestLazyEvaluatedKernelTensorBatch,_test_rmatmul,assertAllClose,61,"self.assertAllClose(param.grad, param_copy.grad, rtol=0.001)"
task2results/gpytorch/test/lazy/test_lazy_evaluated_kernel_tensor.py,TestLazyEvaluatedKernelTensorBatch,_test_rmatmul,assertAllClose,62,"self.assertAllClose(lazy_tensor.x1.grad + lazy_tensor.x2.grad, lazy_tensor_copy.x1.grad + lazy_tensor_copy.x2.grad, rtol=0.001, atol=0.0001)"
task2results/gpytorch/test/lazy/test_lazy_evaluated_kernel_tensor.py,TestLazyEvaluatedKernelTensorBatch,_test_inv_matmul,assertAllClose,92,"self.assertAllClose(res, actual, rtol=0.02, atol=1e-05)"
task2results/gpytorch/test/lazy/test_lazy_evaluated_kernel_tensor.py,TestLazyEvaluatedKernelTensorBatch,_test_inv_matmul,assertAllClose,99,"self.assertAllClose(param.grad, param_copy.grad, rtol=0.001)"
task2results/gpytorch/test/lazy/test_lazy_evaluated_kernel_tensor.py,TestLazyEvaluatedKernelTensorBatch,_test_inv_matmul,assertAllClose,100,"self.assertAllClose(lazy_tensor.x1.grad + lazy_tensor.x2.grad, lazy_tensor_copy.x1.grad + lazy_tensor_copy.x2.grad, rtol=0.001)"
task2results/gpytorch/test/lazy/test_lazy_evaluated_kernel_tensor.py,TestLazyEvaluatedKernelTensorBatch,_test_inv_matmul,assertAllClose,105,"self.assertAllClose(rhs.grad, rhs_copy.grad, rtol=0.03, atol=1e-05)"
task2results/gpytorch/test/lazy/test_lazy_evaluated_kernel_tensor.py,TestLazyEvaluatedKernelTensorBatch,_test_inv_matmul,assertAllClose,107,"self.assertAllClose(lhs.grad, lhs_copy.grad, rtol=0.03, atol=1e-05)"
task2results/gpytorch/test/lazy/test_lazy_tensor_deprecation.py,LazyTensorImport,test_deprecated_methods,assertAllClose,67,"self.assertAllClose(nlt.add_diag(diag).to_dense(), dlo.add_diagonal(diag).to_dense())"
task2results/gpytorch/test/lazy/test_lazy_tensor_deprecation.py,LazyTensorImport,test_deprecated_methods,assertAllClose,72,"self.assertAllClose(nlt.diag(), dlo.diag())"
task2results/gpytorch/test/lazy/test_lazy_tensor_deprecation.py,LazyTensorImport,test_deprecated_methods,assertAllClose,77,"self.assertAllClose(nlt.evaluate(), dlo.to_dense())"
task2results/gpytorch/test/lazy/test_lazy_tensor_deprecation.py,LazyTensorImport,test_deprecated_methods,assertAllClose,83,"self.assertAllClose(nlt.inv_matmul(rhs), dlo.solve(rhs))"
task2results/gpytorch/test/lazy/test_lazy_tensor_deprecation.py,LazyTensorImport,test_deprecated_methods,assertAllClose,88,"self.assertAllClose(nlt.symeig(eigenvectors=True)[0], torch.linalg.eigh(dlo)[0])"
task2results/gpytorch/test/lazy/test_lazy_tensor_deprecation.py,LazyTensorImport,test_deprecated_methods,assertAllClose,89,"self.assertAllClose(nlt.symeig(eigenvectors=True)[1].to_dense(), torch.linalg.eigh(dlo)[1].to_dense())"
task2results/gpytorch/test/lazy/test_lazy_tensor_deprecation.py,LazyTensorImport,test_deprecated_methods,assertAllClose,94,"self.assertAllClose(nlt.symeig(eigenvectors=False)[0], torch.linalg.eigvalsh(dlo))"
task2results/gpytorch/test/lazy/test_lazy_tensor_deprecation.py,LazyTensorImport,test_deprecated_methods,assertAllClose,101,"self.assertAllClose(nlt._quad_form_derivative(a, b)[0], dlo._bilinear_derivative(a, b)[0])"
task2results/gpytorch/test/variational/test_lmc_variational_strategy.py,TestIndexedLMCVariationalGP,_training_iter,assertGreater,205,"self.assertGreater(param.grad.norm().item(), 0)"
task2results/gpytorch/test/variational/test_lmc_variational_strategy.py,TestIndexedLMCVariationalGP,_training_iter,assertGreater,208,"self.assertGreater(param.grad.norm().item(), 0)"
task2results/gpytorch/test/variational/test_independent_multitask_variational_strategy.py,TestIndexedMultitaskVariationalGP,_training_iter,assertGreater,145,"self.assertGreater(param.grad.norm().item(), 0)"
task2results/gpytorch/test/variational/test_independent_multitask_variational_strategy.py,TestIndexedMultitaskVariationalGP,_training_iter,assertGreater,148,"self.assertGreater(param.grad.norm().item(), 0)"
task2results/gpytorch/test/variational/test_nearest_neighbor_variational_strategy.py,_VNNGPRegressionModel,_training_iter,assertGreater,108,"self.assertGreater(param.grad.norm().item(), 0)"
task2results/gpytorch/test/variational/test_nearest_neighbor_variational_strategy.py,_VNNGPRegressionModel,_training_iter,assertGreater,111,"self.assertGreater(param.grad.norm().item(), 0)"
task2results/gpytorch/test/functions/test_log_normal_cdf.py,TestLogNormalCDF,test_forward,assertLess,18,"self.assertLess(math.fabs(output[0] + 20.7368), 0.0001)"
task2results/gpytorch/test/functions/test_log_normal_cdf.py,TestLogNormalCDF,test_forward,assertLess,19,"self.assertLess(math.fabs(output[1] + 15), 0.1)"
task2results/gpytorch/test/functions/test_log_normal_cdf.py,TestLogNormalCDF,test_forward,assertLess,20,"self.assertLess(math.fabs(output[2] + 6.6), 0.01)"
task2results/gpytorch/test/functions/test_log_normal_cdf.py,TestLogNormalCDF,test_forward,assertLess,21,"self.assertLess(math.fabs(output[3] + 1.841), 0.001)"
task2results/gpytorch/test/functions/test_log_normal_cdf.py,TestLogNormalCDF,test_forward,assertLess,24,"self.assertLess(math.fabs(output[4] + 0.693147), 0.0001)"
task2results/gpytorch/test/functions/test_log_normal_cdf.py,TestLogNormalCDF,test_forward,assertLess,25,"self.assertLess(math.fabs(output[5] + 0.1727), 0.0001)"
task2results/gpytorch/test/functions/test_log_normal_cdf.py,TestLogNormalCDF,test_forward,assertLess,26,"self.assertLess(math.fabs(output[6] + 0.00135081), 0.0001)"
task2results/gpytorch/test/functions/test_log_normal_cdf.py,TestLogNormalCDF,test_forward,assertLess,27,"self.assertLess(math.fabs(output[7] + 2.86652e-07), 0.0001)"
task2results/gpytorch/test/functions/test_log_normal_cdf.py,TestLogNormalCDF,test_backward,assertLess,41,"self.assertLess(d, 0.5)"
task2results/gpytorch/test/functions/test_log_normal_cdf.py,TestLogNormalCDF,test_backward,assertLess,45,"self.assertLess(d, 0.0005)"
task2results/gpytorch/test/distributions/test_multitask_multivariate_normal.py,TestMultiTaskMultivariateNormal,test_multitask_multivariate_normal,assertAlmostEqual,65,"self.assertAlmostEqual(mtmvn.entropy().item(), 11.80326, places=4)"
task2results/gpytorch/test/distributions/test_multitask_multivariate_normal.py,TestMultiTaskMultivariateNormal,test_multitask_multivariate_normal,assertAlmostEqual,66,"self.assertAlmostEqual(mtmvn.log_prob(torch.zeros(3, 2, device=device, dtype=dtype)).item(), -14.52826, places=4)"
task2results/gpytorch/test/distributions/test_multitask_multivariate_normal.py,TestMultiTaskMultivariateNormal,test_log_prob,assertLess,188,"self.assertLess((res - actual).div(res).abs().item(), 0.01)"
task2results/gpytorch/test/distributions/test_multitask_multivariate_normal.py,TestMultiTaskMultivariateNormal,test_log_prob,assertLess,197,"self.assertLess((res - actual).div(res).abs().norm(), 0.01)"
task2results/gpytorch/test/distributions/test_multitask_multivariate_normal.py,TestMultiTaskMultivariateNormal,test_to_data_independent_dist,assertAllClose,221,"self.assertAllClose(res.covariance_matrix, data_var.view(-1, 1, 1) * task_covar + jitter)"
task2results/gpytorch/test/distributions/test_multivariate_normal.py,TestMultivariateNormal,test_multivariate_normal_non_lazy,assertAllClose,27,"self.assertAllClose(mvn.variance, torch.diag(covmat))"
task2results/gpytorch/test/distributions/test_multivariate_normal.py,TestMultivariateNormal,test_multivariate_normal_non_lazy,assertAllClose,28,"self.assertAllClose(mvn.scale_tril, covmat.sqrt())"
task2results/gpytorch/test/distributions/test_multivariate_normal.py,TestMultivariateNormal,test_multivariate_normal_non_lazy,assertAllClose,30,"self.assertAllClose(mvn_plus1.mean, mvn.mean + 1)"
task2results/gpytorch/test/distributions/test_multivariate_normal.py,TestMultivariateNormal,test_multivariate_normal_non_lazy,assertAllClose,31,"self.assertAllClose(mvn_plus1.covariance_matrix, mvn.covariance_matrix)"
task2results/gpytorch/test/distributions/test_multivariate_normal.py,TestMultivariateNormal,test_multivariate_normal_non_lazy,assertAllClose,33,"self.assertAllClose(mvn_times2.mean, mvn.mean * 2)"
task2results/gpytorch/test/distributions/test_multivariate_normal.py,TestMultivariateNormal,test_multivariate_normal_non_lazy,assertAllClose,34,"self.assertAllClose(mvn_times2.covariance_matrix, mvn.covariance_matrix * 4)"
task2results/gpytorch/test/distributions/test_multivariate_normal.py,TestMultivariateNormal,test_multivariate_normal_non_lazy,assertAllClose,36,"self.assertAllClose(mvn_divby2.mean, mvn.mean / 2)"
task2results/gpytorch/test/distributions/test_multivariate_normal.py,TestMultivariateNormal,test_multivariate_normal_non_lazy,assertAllClose,37,"self.assertAllClose(mvn_divby2.covariance_matrix, mvn.covariance_matrix / 4)"
task2results/gpytorch/test/distributions/test_multivariate_normal.py,TestMultivariateNormal,test_multivariate_normal_non_lazy,assertAlmostEqual,38,"self.assertAlmostEqual(mvn.entropy().item(), 4.3157, places=4)"
task2results/gpytorch/test/distributions/test_multivariate_normal.py,TestMultivariateNormal,test_multivariate_normal_non_lazy,assertAlmostEqual,39,"self.assertAlmostEqual(mvn.log_prob(torch.zeros(3, device=device, dtype=dtype)).item(), -4.8157, places=4)"
task2results/gpytorch/test/distributions/test_multivariate_normal.py,TestMultivariateNormal,test_multivariate_normal_non_lazy,assertAllClose,42,"self.assertAllClose(logprob, logprob_expected)"
task2results/gpytorch/test/distributions/test_multivariate_normal.py,TestMultivariateNormal,test_multivariate_normal_non_lazy,assertAllClose,44,"self.assertAllClose(conf_lower, mvn.mean - 2 * mvn.stddev)"
task2results/gpytorch/test/distributions/test_multivariate_normal.py,TestMultivariateNormal,test_multivariate_normal_non_lazy,assertAllClose,45,"self.assertAllClose(conf_upper, mvn.mean + 2 * mvn.stddev)"
task2results/gpytorch/test/distributions/test_multivariate_normal.py,TestMultivariateNormal,test_multivariate_normal_batch_non_lazy,assertAllClose,65,"self.assertAllClose(mvn.variance, covmat.diagonal(dim1=-1, dim2=-2).repeat(2, 1))"
task2results/gpytorch/test/distributions/test_multivariate_normal.py,TestMultivariateNormal,test_multivariate_normal_batch_non_lazy,assertAllClose,66,"self.assertAllClose(mvn.scale_tril, torch.diag(covmat.diagonal(dim1=-1, dim2=-2).sqrt()).repeat(2, 1, 1))"
task2results/gpytorch/test/distributions/test_multivariate_normal.py,TestMultivariateNormal,test_multivariate_normal_batch_non_lazy,assertAllClose,68,"self.assertAllClose(mvn_plus1.mean, mvn.mean + 1)"
task2results/gpytorch/test/distributions/test_multivariate_normal.py,TestMultivariateNormal,test_multivariate_normal_batch_non_lazy,assertAllClose,69,"self.assertAllClose(mvn_plus1.covariance_matrix, mvn.covariance_matrix)"
task2results/gpytorch/test/distributions/test_multivariate_normal.py,TestMultivariateNormal,test_multivariate_normal_batch_non_lazy,assertAllClose,71,"self.assertAllClose(mvn_times2.mean, mvn.mean * 2)"
task2results/gpytorch/test/distributions/test_multivariate_normal.py,TestMultivariateNormal,test_multivariate_normal_batch_non_lazy,assertAllClose,72,"self.assertAllClose(mvn_times2.covariance_matrix, mvn.covariance_matrix * 4)"
task2results/gpytorch/test/distributions/test_multivariate_normal.py,TestMultivariateNormal,test_multivariate_normal_batch_non_lazy,assertAllClose,74,"self.assertAllClose(mvn_divby2.mean, mvn.mean / 2)"
task2results/gpytorch/test/distributions/test_multivariate_normal.py,TestMultivariateNormal,test_multivariate_normal_batch_non_lazy,assertAllClose,75,"self.assertAllClose(mvn_divby2.covariance_matrix, mvn.covariance_matrix / 4)"
task2results/gpytorch/test/distributions/test_multivariate_normal.py,TestMultivariateNormal,test_multivariate_normal_batch_non_lazy,assertAllClose,76,"self.assertAllClose(mvn.entropy(), 4.3157 * torch.ones(2, device=device, dtype=dtype))"
task2results/gpytorch/test/distributions/test_multivariate_normal.py,TestMultivariateNormal,test_multivariate_normal_batch_non_lazy,assertAllClose,79,"self.assertAllClose(logprob, logprob_expected)"
task2results/gpytorch/test/distributions/test_multivariate_normal.py,TestMultivariateNormal,test_multivariate_normal_batch_non_lazy,assertAllClose,82,"self.assertAllClose(logprob, logprob_expected)"
task2results/gpytorch/test/distributions/test_multivariate_normal.py,TestMultivariateNormal,test_multivariate_normal_batch_non_lazy,assertAllClose,84,"self.assertAllClose(conf_lower, mvn.mean - 2 * mvn.stddev)"
task2results/gpytorch/test/distributions/test_multivariate_normal.py,TestMultivariateNormal,test_multivariate_normal_batch_non_lazy,assertAllClose,85,"self.assertAllClose(conf_upper, mvn.mean + 2 * mvn.stddev)"
task2results/gpytorch/test/distributions/test_multivariate_normal.py,TestMultivariateNormal,test_multivariate_normal_lazy,assertAllClose,104,"self.assertAllClose(mvn.variance, torch.diag(covmat))"
task2results/gpytorch/test/distributions/test_multivariate_normal.py,TestMultivariateNormal,test_multivariate_normal_lazy,assertAllClose,105,"self.assertAllClose(mvn.covariance_matrix, covmat)"
task2results/gpytorch/test/distributions/test_multivariate_normal.py,TestMultivariateNormal,test_multivariate_normal_lazy,assertAllClose,106,"self.assertAllClose(mvn._unbroadcasted_scale_tril, covmat_chol)"
task2results/gpytorch/test/distributions/test_multivariate_normal.py,TestMultivariateNormal,test_multivariate_normal_lazy,assertAllClose,108,"self.assertAllClose(mvn_plus1.mean, mvn.mean + 1)"
task2results/gpytorch/test/distributions/test_multivariate_normal.py,TestMultivariateNormal,test_multivariate_normal_lazy,assertAllClose,109,"self.assertAllClose(mvn_plus1.covariance_matrix, mvn.covariance_matrix)"
task2results/gpytorch/test/distributions/test_multivariate_normal.py,TestMultivariateNormal,test_multivariate_normal_lazy,assertAllClose,110,"self.assertAllClose(mvn_plus1._unbroadcasted_scale_tril, covmat_chol)"
task2results/gpytorch/test/distributions/test_multivariate_normal.py,TestMultivariateNormal,test_multivariate_normal_lazy,assertAllClose,112,"self.assertAllClose(mvn_times2.mean, mvn.mean * 2)"
task2results/gpytorch/test/distributions/test_multivariate_normal.py,TestMultivariateNormal,test_multivariate_normal_lazy,assertAllClose,113,"self.assertAllClose(mvn_times2.covariance_matrix, mvn.covariance_matrix * 4)"
task2results/gpytorch/test/distributions/test_multivariate_normal.py,TestMultivariateNormal,test_multivariate_normal_lazy,assertAllClose,114,"self.assertAllClose(mvn_times2._unbroadcasted_scale_tril, covmat_chol * 2)"
task2results/gpytorch/test/distributions/test_multivariate_normal.py,TestMultivariateNormal,test_multivariate_normal_lazy,assertAllClose,116,"self.assertAllClose(mvn_divby2.mean, mvn.mean / 2)"
task2results/gpytorch/test/distributions/test_multivariate_normal.py,TestMultivariateNormal,test_multivariate_normal_lazy,assertAllClose,117,"self.assertAllClose(mvn_divby2.covariance_matrix, mvn.covariance_matrix / 4)"
task2results/gpytorch/test/distributions/test_multivariate_normal.py,TestMultivariateNormal,test_multivariate_normal_lazy,assertAllClose,118,"self.assertAllClose(mvn_divby2._unbroadcasted_scale_tril, covmat_chol / 2)"
task2results/gpytorch/test/distributions/test_multivariate_normal.py,TestMultivariateNormal,test_multivariate_normal_lazy,assertAllClose,129,"self.assertAllClose(conf_lower, mvn.mean - 2 * mvn.stddev)"
task2results/gpytorch/test/distributions/test_multivariate_normal.py,TestMultivariateNormal,test_multivariate_normal_lazy,assertAllClose,130,"self.assertAllClose(conf_upper, mvn.mean + 2 * mvn.stddev)"
task2results/gpytorch/test/distributions/test_multivariate_normal.py,TestMultivariateNormal,test_multivariate_normal_batch_lazy,assertAllClose,149,"self.assertAllClose(mvn.variance, torch.diagonal(covmat, dim1=-2, dim2=-1))"
task2results/gpytorch/test/distributions/test_multivariate_normal.py,TestMultivariateNormal,test_multivariate_normal_batch_lazy,assertAllClose,150,"self.assertAllClose(mvn._unbroadcasted_scale_tril, covmat_chol)"
task2results/gpytorch/test/distributions/test_multivariate_normal.py,TestMultivariateNormal,test_multivariate_normal_batch_lazy,assertAllClose,152,"self.assertAllClose(mvn_plus1.mean, mvn.mean + 1)"
task2results/gpytorch/test/distributions/test_multivariate_normal.py,TestMultivariateNormal,test_multivariate_normal_batch_lazy,assertAllClose,153,"self.assertAllClose(mvn_plus1.covariance_matrix, mvn.covariance_matrix)"
task2results/gpytorch/test/distributions/test_multivariate_normal.py,TestMultivariateNormal,test_multivariate_normal_batch_lazy,assertAllClose,154,"self.assertAllClose(mvn_plus1._unbroadcasted_scale_tril, covmat_chol)"
task2results/gpytorch/test/distributions/test_multivariate_normal.py,TestMultivariateNormal,test_multivariate_normal_batch_lazy,assertAllClose,156,"self.assertAllClose(mvn_times2.mean, mvn.mean * 2)"
task2results/gpytorch/test/distributions/test_multivariate_normal.py,TestMultivariateNormal,test_multivariate_normal_batch_lazy,assertAllClose,157,"self.assertAllClose(mvn_times2.covariance_matrix, mvn.covariance_matrix * 4)"
task2results/gpytorch/test/distributions/test_multivariate_normal.py,TestMultivariateNormal,test_multivariate_normal_batch_lazy,assertAllClose,158,"self.assertAllClose(mvn_times2._unbroadcasted_scale_tril, covmat_chol * 2)"
task2results/gpytorch/test/distributions/test_multivariate_normal.py,TestMultivariateNormal,test_multivariate_normal_batch_lazy,assertAllClose,160,"self.assertAllClose(mvn_divby2.mean, mvn.mean / 2)"
task2results/gpytorch/test/distributions/test_multivariate_normal.py,TestMultivariateNormal,test_multivariate_normal_batch_lazy,assertAllClose,161,"self.assertAllClose(mvn_divby2.covariance_matrix, mvn.covariance_matrix / 4)"
task2results/gpytorch/test/distributions/test_multivariate_normal.py,TestMultivariateNormal,test_multivariate_normal_batch_lazy,assertAllClose,162,"self.assertAllClose(mvn_divby2._unbroadcasted_scale_tril, covmat_chol / 2)"
task2results/gpytorch/test/distributions/test_multivariate_normal.py,TestMultivariateNormal,test_multivariate_normal_batch_lazy,assertAllClose,173,"self.assertAllClose(conf_lower, mvn.mean - 2 * mvn.stddev)"
task2results/gpytorch/test/distributions/test_multivariate_normal.py,TestMultivariateNormal,test_multivariate_normal_batch_lazy,assertAllClose,174,"self.assertAllClose(conf_upper, mvn.mean + 2 * mvn.stddev)"
task2results/gpytorch/test/distributions/test_multivariate_normal.py,TestMultivariateNormal,test_log_prob,assertLess,227,"self.assertLess((res - actual).div(res).abs().item(), 0.01)"
task2results/gpytorch/test/distributions/test_multivariate_normal.py,TestMultivariateNormal,test_log_prob,assertLess,237,"self.assertLess((res - actual).div(res).abs().norm(), 0.01)"
task2results/gpytorch/test/distributions/test_multivariate_normal.py,TestMultivariateNormal,test_kl_divergence,assertLess,258,"self.assertLess((res - actual).abs().item(), 0.01)"
task2results/gpytorch/test/distributions/test_multivariate_normal.py,TestMultivariateNormal,test_kl_divergence,assertLess,262,"self.assertLess((res - actual).div(res).abs().item(), 0.01)"
task2results/gpytorch/test/distributions/test_multivariate_normal.py,TestMultivariateNormal,test_kl_divergence,assertLess,266,"self.assertLess((res - actual).div(res).abs().item(), 0.01)"
task2results/gpytorch/test/distributions/test_multivariate_normal.py,TestMultivariateNormal,test_getitem,assertAllClose,283,"self.assertAllClose(d.covariance_matrix, dist_cov[1])"
task2results/gpytorch/test/distributions/test_multivariate_normal.py,TestMultivariateNormal,test_getitem,assertAllClose,288,"self.assertAllClose(d.covariance_matrix, cov.unsqueeze(-1) * torch.eye(shape[-2]))"
task2results/gpytorch/test/distributions/test_multivariate_normal.py,TestMultivariateNormal,test_getitem,assertAllClose,292,"self.assertAllClose(d.covariance_matrix, dist_cov[:, [2, 3], :, 1:, 1:])"
task2results/gpytorch/test/distributions/test_multivariate_normal.py,TestMultivariateNormal,test_getitem,assertAllClose,296,"self.assertAllClose(d.covariance_matrix, dist_cov[..., [0, 1, 1, 0], :][..., [0, 1, 1, 0]])"
task2results/gpytorch/test/distributions/test_multivariate_normal.py,TestMultivariateNormal,test_getitem,assertAllClose,300,"self.assertAllClose(d.covariance_matrix, dist_cov[1, 2, 2, :, :])"
task2results/gpytorch/gpytorch/test/model_test_case.py,VariationalModelTestCase,test_backward_train,assertGreater,115,"self.assertGreater(param.grad.norm().item(), 0)"
task2results/gpytorch/gpytorch/test/model_test_case.py,VariationalModelTestCase,test_backward_train,assertGreater,118,"self.assertGreater(param.grad.norm().item(), 0)"
task2results/gpytorch/gpytorch/test/model_test_case.py,VariationalModelTestCase,test_batch_backward_train,assertGreater,143,"self.assertGreater(param.grad.norm().item(), 0)"
task2results/gpytorch/gpytorch/test/model_test_case.py,VariationalModelTestCase,test_batch_backward_train,assertGreater,146,"self.assertGreater(param.grad.norm().item(), 0)"
task2results/gpytorch/gpytorch/test/base_likelihood_test_case.py,BaseLikelihoodTestCase,_test_log_marginal,assertAllClose,52,"self.assertAllClose(output, default_log_prob, rtol=0.25)"
task2results/gpytorch/gpytorch/test/base_likelihood_test_case.py,BaseLikelihoodTestCase,_test_log_prob,assertAllClose,66,"self.assertAllClose(output, default_log_prob, rtol=0.25)"
task2results/gpytorch/gpytorch/test/base_likelihood_test_case.py,BaseLikelihoodTestCase,_test_marginal,assertAllClose,85,"self.assertAllClose(default_mean, actual_mean, rtol=0.25, atol=0.25)"
task2results/gpytorch/gpytorch/test/base_keops_test_case.py,BaseKeOpsTestCase,test_forward_x1_eq_x2,assertLess,42,"self.assertLess(torch.norm(k1 - k2), 0.0001)"
task2results/gpytorch/gpytorch/test/base_keops_test_case.py,BaseKeOpsTestCase,test_forward_x1_neq_x2,assertLess,68,"self.assertLess(torch.norm(k1 - k2), 0.0001)"
task2results/gpytorch/gpytorch/test/base_keops_test_case.py,BaseKeOpsTestCase,test_batch_matmul,assertLess,88,"self.assertLess(torch.norm(res1 - res2), 0.0001)"
task2results/gpytorch/gpytorch/test/base_keops_test_case.py,BaseKeOpsTestCase,test_gradient,assertAllClose,117,"self.assertAllClose(grad_s1, grad_s2, rtol=0.0001, atol=1e-05)"
task2results/gpytorch/gpytorch/test/base_kernel_test_case.py,BaseKernelTestCase,test_active_dims_list,assertAllClose,35,"self.assertAllClose(covar_mat, covar_mat_actual, rtol=0.001, atol=1e-05)"
task2results/gpytorch/gpytorch/test/base_kernel_test_case.py,BaseKernelTestCase,test_active_dims_range,assertAllClose,45,"self.assertAllClose(covar_mat, covar_mat_actual, rtol=0.001, atol=1e-05)"
task2results/gpytorch/gpytorch/test/base_kernel_test_case.py,BaseKernelTestCase,test_no_batch_kernel_single_batch_x_no_ard,assertAllClose,56,"self.assertAllClose(batch_covar_mat, actual_covar_mat, rtol=0.001, atol=1e-05)"
task2results/gpytorch/gpytorch/test/base_kernel_test_case.py,BaseKernelTestCase,test_no_batch_kernel_single_batch_x_no_ard,assertAllClose,61,"self.assertAllClose(kernel_diag, actual_diag, rtol=0.001, atol=1e-05)"
task2results/gpytorch/gpytorch/test/base_kernel_test_case.py,BaseKernelTestCase,test_single_batch_kernel_single_batch_x_no_ard,assertAllClose,72,"self.assertAllClose(batch_covar_mat, actual_covar_mat, rtol=0.001, atol=1e-05)"
task2results/gpytorch/gpytorch/test/base_kernel_test_case.py,BaseKernelTestCase,test_single_batch_kernel_single_batch_x_no_ard,assertAllClose,77,"self.assertAllClose(kernel_diag, actual_diag, rtol=0.001, atol=1e-05)"
task2results/gpytorch/gpytorch/test/base_kernel_test_case.py,BaseKernelTestCase,test_no_batch_kernel_double_batch_x_no_ard,assertAllClose,93,"self.assertAllClose(batch_covar_mat, actual_covar_mat, rtol=0.001, atol=1e-05)"
task2results/gpytorch/gpytorch/test/base_kernel_test_case.py,BaseKernelTestCase,test_no_batch_kernel_double_batch_x_no_ard,assertAllClose,98,"self.assertAllClose(kernel_diag, actual_diag, rtol=0.001, atol=1e-05)"
task2results/gpytorch/gpytorch/test/base_kernel_test_case.py,BaseKernelTestCase,test_no_batch_kernel_double_batch_x_ard,assertAllClose,118,"self.assertAllClose(batch_covar_mat, actual_covar_mat, rtol=0.001, atol=1e-05)"
task2results/gpytorch/gpytorch/test/base_kernel_test_case.py,BaseKernelTestCase,test_no_batch_kernel_double_batch_x_ard,assertAllClose,123,"self.assertAllClose(kernel_diag, actual_diag, rtol=0.001, atol=1e-05)"
task2results/gpytorch/gpytorch/test/base_kernel_test_case.py,BaseKernelTestCase,test_kernel_getitem_single_batch,assertAllClose,152,"self.assertAllClose(res1, res2, rtol=0.001, atol=1e-05)"
task2results/gpytorch/gpytorch/test/base_kernel_test_case.py,BaseKernelTestCase,test_kernel_getitem_double_batch,assertAllClose,163,"self.assertAllClose(res1, res2, rtol=0.001, atol=1e-05)"
task2results/gpytorch/gpytorch/test/base_kernel_test_case.py,BaseKernelTestCase,test_kernel_getitem_broadcast,assertAllClose,177,"self.assertAllClose(res1, res2, rtol=0.001, atol=1e-05)"
task2results/gpytorch/gpytorch/test/variational_test_case.py,_SVGPRegressionModel,_training_iter,assertGreater,79,"self.assertGreater(param.grad.norm().item(), 0)"
task2results/gpytorch/gpytorch/test/variational_test_case.py,_SVGPRegressionModel,_training_iter,assertGreater,82,"self.assertGreater(param.grad.norm().item(), 0)"
